/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TaskContractDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1697615467693383354L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TaskContractDto\",\"namespace\":\"com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Contract id\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Contract name\"},{\"name\":\"revisionNumber\",\"type\":\"long\",\"doc\":\"Revision number of contract\"},{\"name\":\"contractType\",\"type\":{\"type\":\"enum\",\"name\":\"TaskContractTypeDto\",\"symbols\":[\"PURCHASE\",\"SELL\"]},\"doc\":\"Defines if it is purchase or sell contract\"},{\"name\":\"tariffName\",\"type\":\"string\",\"doc\":\"Contract tariff\"},{\"name\":\"minPowerConstraints\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TaskContractConstraintDto\",\"fields\":[{\"name\":\"constraintValue\",\"type\":\"double\",\"doc\":\"Constraint value\"},{\"name\":\"dateTimeStart\",\"type\":\"string\",\"doc\":\"Date and time of constraint start\"},{\"name\":\"dateTimeEnd\",\"type\":\"string\",\"doc\":\"Date and time of constraint end\"}]}},\"doc\":\"Minimal power constraints of contract\",\"default\":[]},{\"name\":\"maxPowerConstraints\",\"type\":{\"type\":\"array\",\"items\":\"TaskContractConstraintDto\"},\"doc\":\"Maximal power constraints of contract\",\"default\":[]},{\"name\":\"minEnergyConstraints\",\"type\":{\"type\":\"array\",\"items\":\"TaskContractConstraintDto\"},\"doc\":\"Minimal energy constraints of contract\",\"default\":[]},{\"name\":\"maxEnergyConstraints\",\"type\":{\"type\":\"array\",\"items\":\"TaskContractConstraintDto\"},\"doc\":\"Maximal energy constraints of contract\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TaskContractDto> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TaskContractDto> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TaskContractDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TaskContractDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TaskContractDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TaskContractDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TaskContractDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TaskContractDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TaskContractDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Contract id */
  private long id;
  /** Contract name */
  private java.lang.CharSequence name;
  /** Revision number of contract */
  private long revisionNumber;
  /** Defines if it is purchase or sell contract */
  private com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractTypeDto contractType;
  /** Contract tariff */
  private java.lang.CharSequence tariffName;
  /** Minimal power constraints of contract */
  private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> minPowerConstraints;
  /** Maximal power constraints of contract */
  private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> maxPowerConstraints;
  /** Minimal energy constraints of contract */
  private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> minEnergyConstraints;
  /** Maximal energy constraints of contract */
  private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> maxEnergyConstraints;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TaskContractDto() {}

  /**
   * All-args constructor.
   * @param id Contract id
   * @param name Contract name
   * @param revisionNumber Revision number of contract
   * @param contractType Defines if it is purchase or sell contract
   * @param tariffName Contract tariff
   * @param minPowerConstraints Minimal power constraints of contract
   * @param maxPowerConstraints Maximal power constraints of contract
   * @param minEnergyConstraints Minimal energy constraints of contract
   * @param maxEnergyConstraints Maximal energy constraints of contract
   */
  public TaskContractDto(java.lang.Long id, java.lang.CharSequence name, java.lang.Long revisionNumber, com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractTypeDto contractType, java.lang.CharSequence tariffName, java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> minPowerConstraints, java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> maxPowerConstraints, java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> minEnergyConstraints, java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> maxEnergyConstraints) {
    this.id = id;
    this.name = name;
    this.revisionNumber = revisionNumber;
    this.contractType = contractType;
    this.tariffName = tariffName;
    this.minPowerConstraints = minPowerConstraints;
    this.maxPowerConstraints = maxPowerConstraints;
    this.minEnergyConstraints = minEnergyConstraints;
    this.maxEnergyConstraints = maxEnergyConstraints;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return revisionNumber;
    case 3: return contractType;
    case 4: return tariffName;
    case 5: return minPowerConstraints;
    case 6: return maxPowerConstraints;
    case 7: return minEnergyConstraints;
    case 8: return maxEnergyConstraints;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: revisionNumber = (java.lang.Long)value$; break;
    case 3: contractType = (com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractTypeDto)value$; break;
    case 4: tariffName = (java.lang.CharSequence)value$; break;
    case 5: minPowerConstraints = (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>)value$; break;
    case 6: maxPowerConstraints = (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>)value$; break;
    case 7: minEnergyConstraints = (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>)value$; break;
    case 8: maxEnergyConstraints = (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Contract id
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Contract id
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return Contract name
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * Contract name
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'revisionNumber' field.
   * @return Revision number of contract
   */
  public long getRevisionNumber() {
    return revisionNumber;
  }


  /**
   * Sets the value of the 'revisionNumber' field.
   * Revision number of contract
   * @param value the value to set.
   */
  public void setRevisionNumber(long value) {
    this.revisionNumber = value;
  }

  /**
   * Gets the value of the 'contractType' field.
   * @return Defines if it is purchase or sell contract
   */
  public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractTypeDto getContractType() {
    return contractType;
  }


  /**
   * Sets the value of the 'contractType' field.
   * Defines if it is purchase or sell contract
   * @param value the value to set.
   */
  public void setContractType(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractTypeDto value) {
    this.contractType = value;
  }

  /**
   * Gets the value of the 'tariffName' field.
   * @return Contract tariff
   */
  public java.lang.CharSequence getTariffName() {
    return tariffName;
  }


  /**
   * Sets the value of the 'tariffName' field.
   * Contract tariff
   * @param value the value to set.
   */
  public void setTariffName(java.lang.CharSequence value) {
    this.tariffName = value;
  }

  /**
   * Gets the value of the 'minPowerConstraints' field.
   * @return Minimal power constraints of contract
   */
  public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> getMinPowerConstraints() {
    return minPowerConstraints;
  }


  /**
   * Sets the value of the 'minPowerConstraints' field.
   * Minimal power constraints of contract
   * @param value the value to set.
   */
  public void setMinPowerConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> value) {
    this.minPowerConstraints = value;
  }

  /**
   * Gets the value of the 'maxPowerConstraints' field.
   * @return Maximal power constraints of contract
   */
  public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> getMaxPowerConstraints() {
    return maxPowerConstraints;
  }


  /**
   * Sets the value of the 'maxPowerConstraints' field.
   * Maximal power constraints of contract
   * @param value the value to set.
   */
  public void setMaxPowerConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> value) {
    this.maxPowerConstraints = value;
  }

  /**
   * Gets the value of the 'minEnergyConstraints' field.
   * @return Minimal energy constraints of contract
   */
  public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> getMinEnergyConstraints() {
    return minEnergyConstraints;
  }


  /**
   * Sets the value of the 'minEnergyConstraints' field.
   * Minimal energy constraints of contract
   * @param value the value to set.
   */
  public void setMinEnergyConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> value) {
    this.minEnergyConstraints = value;
  }

  /**
   * Gets the value of the 'maxEnergyConstraints' field.
   * @return Maximal energy constraints of contract
   */
  public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> getMaxEnergyConstraints() {
    return maxEnergyConstraints;
  }


  /**
   * Sets the value of the 'maxEnergyConstraints' field.
   * Maximal energy constraints of contract
   * @param value the value to set.
   */
  public void setMaxEnergyConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> value) {
    this.maxEnergyConstraints = value;
  }

  /**
   * Creates a new TaskContractDto RecordBuilder.
   * @return A new TaskContractDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder newBuilder() {
    return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder();
  }

  /**
   * Creates a new TaskContractDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TaskContractDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder(other);
    }
  }

  /**
   * Creates a new TaskContractDto RecordBuilder by copying an existing TaskContractDto instance.
   * @param other The existing instance to copy.
   * @return A new TaskContractDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for TaskContractDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TaskContractDto>
    implements org.apache.avro.data.RecordBuilder<TaskContractDto> {

    /** Contract id */
    private long id;
    /** Contract name */
    private java.lang.CharSequence name;
    /** Revision number of contract */
    private long revisionNumber;
    /** Defines if it is purchase or sell contract */
    private com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractTypeDto contractType;
    /** Contract tariff */
    private java.lang.CharSequence tariffName;
    /** Minimal power constraints of contract */
    private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> minPowerConstraints;
    /** Maximal power constraints of contract */
    private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> maxPowerConstraints;
    /** Minimal energy constraints of contract */
    private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> minEnergyConstraints;
    /** Maximal energy constraints of contract */
    private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> maxEnergyConstraints;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.revisionNumber)) {
        this.revisionNumber = data().deepCopy(fields()[2].schema(), other.revisionNumber);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.contractType)) {
        this.contractType = data().deepCopy(fields()[3].schema(), other.contractType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.tariffName)) {
        this.tariffName = data().deepCopy(fields()[4].schema(), other.tariffName);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.minPowerConstraints)) {
        this.minPowerConstraints = data().deepCopy(fields()[5].schema(), other.minPowerConstraints);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.maxPowerConstraints)) {
        this.maxPowerConstraints = data().deepCopy(fields()[6].schema(), other.maxPowerConstraints);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.minEnergyConstraints)) {
        this.minEnergyConstraints = data().deepCopy(fields()[7].schema(), other.minEnergyConstraints);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.maxEnergyConstraints)) {
        this.maxEnergyConstraints = data().deepCopy(fields()[8].schema(), other.maxEnergyConstraints);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing TaskContractDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.revisionNumber)) {
        this.revisionNumber = data().deepCopy(fields()[2].schema(), other.revisionNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.contractType)) {
        this.contractType = data().deepCopy(fields()[3].schema(), other.contractType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tariffName)) {
        this.tariffName = data().deepCopy(fields()[4].schema(), other.tariffName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.minPowerConstraints)) {
        this.minPowerConstraints = data().deepCopy(fields()[5].schema(), other.minPowerConstraints);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.maxPowerConstraints)) {
        this.maxPowerConstraints = data().deepCopy(fields()[6].schema(), other.maxPowerConstraints);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.minEnergyConstraints)) {
        this.minEnergyConstraints = data().deepCopy(fields()[7].schema(), other.minEnergyConstraints);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.maxEnergyConstraints)) {
        this.maxEnergyConstraints = data().deepCopy(fields()[8].schema(), other.maxEnergyConstraints);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Contract id
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Contract id
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Contract id
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Contract id
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * Contract name
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * Contract name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Contract name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * Contract name
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'revisionNumber' field.
      * Revision number of contract
      * @return The value.
      */
    public long getRevisionNumber() {
      return revisionNumber;
    }


    /**
      * Sets the value of the 'revisionNumber' field.
      * Revision number of contract
      * @param value The value of 'revisionNumber'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder setRevisionNumber(long value) {
      validate(fields()[2], value);
      this.revisionNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'revisionNumber' field has been set.
      * Revision number of contract
      * @return True if the 'revisionNumber' field has been set, false otherwise.
      */
    public boolean hasRevisionNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'revisionNumber' field.
      * Revision number of contract
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder clearRevisionNumber() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'contractType' field.
      * Defines if it is purchase or sell contract
      * @return The value.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractTypeDto getContractType() {
      return contractType;
    }


    /**
      * Sets the value of the 'contractType' field.
      * Defines if it is purchase or sell contract
      * @param value The value of 'contractType'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder setContractType(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractTypeDto value) {
      validate(fields()[3], value);
      this.contractType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'contractType' field has been set.
      * Defines if it is purchase or sell contract
      * @return True if the 'contractType' field has been set, false otherwise.
      */
    public boolean hasContractType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'contractType' field.
      * Defines if it is purchase or sell contract
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder clearContractType() {
      contractType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'tariffName' field.
      * Contract tariff
      * @return The value.
      */
    public java.lang.CharSequence getTariffName() {
      return tariffName;
    }


    /**
      * Sets the value of the 'tariffName' field.
      * Contract tariff
      * @param value The value of 'tariffName'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder setTariffName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.tariffName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'tariffName' field has been set.
      * Contract tariff
      * @return True if the 'tariffName' field has been set, false otherwise.
      */
    public boolean hasTariffName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'tariffName' field.
      * Contract tariff
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder clearTariffName() {
      tariffName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'minPowerConstraints' field.
      * Minimal power constraints of contract
      * @return The value.
      */
    public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> getMinPowerConstraints() {
      return minPowerConstraints;
    }


    /**
      * Sets the value of the 'minPowerConstraints' field.
      * Minimal power constraints of contract
      * @param value The value of 'minPowerConstraints'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder setMinPowerConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> value) {
      validate(fields()[5], value);
      this.minPowerConstraints = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'minPowerConstraints' field has been set.
      * Minimal power constraints of contract
      * @return True if the 'minPowerConstraints' field has been set, false otherwise.
      */
    public boolean hasMinPowerConstraints() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'minPowerConstraints' field.
      * Minimal power constraints of contract
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder clearMinPowerConstraints() {
      minPowerConstraints = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxPowerConstraints' field.
      * Maximal power constraints of contract
      * @return The value.
      */
    public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> getMaxPowerConstraints() {
      return maxPowerConstraints;
    }


    /**
      * Sets the value of the 'maxPowerConstraints' field.
      * Maximal power constraints of contract
      * @param value The value of 'maxPowerConstraints'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder setMaxPowerConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> value) {
      validate(fields()[6], value);
      this.maxPowerConstraints = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'maxPowerConstraints' field has been set.
      * Maximal power constraints of contract
      * @return True if the 'maxPowerConstraints' field has been set, false otherwise.
      */
    public boolean hasMaxPowerConstraints() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'maxPowerConstraints' field.
      * Maximal power constraints of contract
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder clearMaxPowerConstraints() {
      maxPowerConstraints = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'minEnergyConstraints' field.
      * Minimal energy constraints of contract
      * @return The value.
      */
    public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> getMinEnergyConstraints() {
      return minEnergyConstraints;
    }


    /**
      * Sets the value of the 'minEnergyConstraints' field.
      * Minimal energy constraints of contract
      * @param value The value of 'minEnergyConstraints'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder setMinEnergyConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> value) {
      validate(fields()[7], value);
      this.minEnergyConstraints = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'minEnergyConstraints' field has been set.
      * Minimal energy constraints of contract
      * @return True if the 'minEnergyConstraints' field has been set, false otherwise.
      */
    public boolean hasMinEnergyConstraints() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'minEnergyConstraints' field.
      * Minimal energy constraints of contract
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder clearMinEnergyConstraints() {
      minEnergyConstraints = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxEnergyConstraints' field.
      * Maximal energy constraints of contract
      * @return The value.
      */
    public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> getMaxEnergyConstraints() {
      return maxEnergyConstraints;
    }


    /**
      * Sets the value of the 'maxEnergyConstraints' field.
      * Maximal energy constraints of contract
      * @param value The value of 'maxEnergyConstraints'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder setMaxEnergyConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> value) {
      validate(fields()[8], value);
      this.maxEnergyConstraints = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'maxEnergyConstraints' field has been set.
      * Maximal energy constraints of contract
      * @return True if the 'maxEnergyConstraints' field has been set, false otherwise.
      */
    public boolean hasMaxEnergyConstraints() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'maxEnergyConstraints' field.
      * Maximal energy constraints of contract
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractDto.Builder clearMaxEnergyConstraints() {
      maxEnergyConstraints = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TaskContractDto build() {
      try {
        TaskContractDto record = new TaskContractDto();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.revisionNumber = fieldSetFlags()[2] ? this.revisionNumber : (java.lang.Long) defaultValue(fields()[2]);
        record.contractType = fieldSetFlags()[3] ? this.contractType : (com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractTypeDto) defaultValue(fields()[3]);
        record.tariffName = fieldSetFlags()[4] ? this.tariffName : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.minPowerConstraints = fieldSetFlags()[5] ? this.minPowerConstraints : (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>) defaultValue(fields()[5]);
        record.maxPowerConstraints = fieldSetFlags()[6] ? this.maxPowerConstraints : (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>) defaultValue(fields()[6]);
        record.minEnergyConstraints = fieldSetFlags()[7] ? this.minEnergyConstraints : (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>) defaultValue(fields()[7]);
        record.maxEnergyConstraints = fieldSetFlags()[8] ? this.maxEnergyConstraints : (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TaskContractDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<TaskContractDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TaskContractDto>
    READER$ = (org.apache.avro.io.DatumReader<TaskContractDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeString(this.name);

    out.writeLong(this.revisionNumber);

    out.writeEnum(this.contractType.ordinal());

    out.writeString(this.tariffName);

    long size0 = this.minPowerConstraints.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto e0: this.minPowerConstraints) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.maxPowerConstraints.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto e1: this.maxPowerConstraints) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.minEnergyConstraints.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto e2: this.minEnergyConstraints) {
      actualSize2++;
      out.startItem();
      e2.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

    long size3 = this.maxEnergyConstraints.size();
    out.writeArrayStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto e3: this.maxEnergyConstraints) {
      actualSize3++;
      out.startItem();
      e3.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.revisionNumber = in.readLong();

      this.contractType = com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractTypeDto.values()[in.readEnum()];

      this.tariffName = in.readString(this.tariffName instanceof Utf8 ? (Utf8)this.tariffName : null);

      long size0 = in.readArrayStart();
      java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> a0 = this.minPowerConstraints;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>((int)size0, SCHEMA$.getField("minPowerConstraints").schema());
        this.minPowerConstraints = a0;
      } else a0.clear();
      SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> a1 = this.maxPowerConstraints;
      if (a1 == null) {
        a1 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>((int)size1, SCHEMA$.getField("maxPowerConstraints").schema());
        this.maxPowerConstraints = a1;
      } else a1.clear();
      SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> a2 = this.minEnergyConstraints;
      if (a2 == null) {
        a2 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>((int)size2, SCHEMA$.getField("minEnergyConstraints").schema());
        this.minEnergyConstraints = a2;
      } else a2.clear();
      SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto e2 = (ga2 != null ? ga2.peek() : null);
          if (e2 == null) {
            e2 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto();
          }
          e2.customDecode(in);
          a2.add(e2);
        }
      }

      long size3 = in.readArrayStart();
      java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> a3 = this.maxEnergyConstraints;
      if (a3 == null) {
        a3 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>((int)size3, SCHEMA$.getField("maxEnergyConstraints").schema());
        this.maxEnergyConstraints = a3;
      } else a3.clear();
      SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>)a3 : null);
      for ( ; 0 < size3; size3 = in.arrayNext()) {
        for ( ; size3 != 0; size3--) {
          com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto e3 = (ga3 != null ? ga3.peek() : null);
          if (e3 == null) {
            e3 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto();
          }
          e3.customDecode(in);
          a3.add(e3);
        }
      }

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 2:
          this.revisionNumber = in.readLong();
          break;

        case 3:
          this.contractType = com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractTypeDto.values()[in.readEnum()];
          break;

        case 4:
          this.tariffName = in.readString(this.tariffName instanceof Utf8 ? (Utf8)this.tariffName : null);
          break;

        case 5:
          long size0 = in.readArrayStart();
          java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> a0 = this.minPowerConstraints;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>((int)size0, SCHEMA$.getField("minPowerConstraints").schema());
            this.minPowerConstraints = a0;
          } else a0.clear();
          SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 6:
          long size1 = in.readArrayStart();
          java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> a1 = this.maxPowerConstraints;
          if (a1 == null) {
            a1 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>((int)size1, SCHEMA$.getField("maxPowerConstraints").schema());
            this.maxPowerConstraints = a1;
          } else a1.clear();
          SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        case 7:
          long size2 = in.readArrayStart();
          java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> a2 = this.minEnergyConstraints;
          if (a2 == null) {
            a2 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>((int)size2, SCHEMA$.getField("minEnergyConstraints").schema());
            this.minEnergyConstraints = a2;
          } else a2.clear();
          SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto e2 = (ga2 != null ? ga2.peek() : null);
              if (e2 == null) {
                e2 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto();
              }
              e2.customDecode(in);
              a2.add(e2);
            }
          }
          break;

        case 8:
          long size3 = in.readArrayStart();
          java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> a3 = this.maxEnergyConstraints;
          if (a3 == null) {
            a3 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>((int)size3, SCHEMA$.getField("maxEnergyConstraints").schema());
            this.maxEnergyConstraints = a3;
          } else a3.clear();
          SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto>)a3 : null);
          for ( ; 0 < size3; size3 = in.arrayNext()) {
            for ( ; size3 != 0; size3--) {
              com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto e3 = (ga3 != null ? ga3.peek() : null);
              if (e3 == null) {
                e3 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskContractConstraintDto();
              }
              e3.customDecode(in);
              a3.add(e3);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










