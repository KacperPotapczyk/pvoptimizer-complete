/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Daily cyclical tariff value */
@org.apache.avro.specific.AvroGenerated
public class CyclicalDailyValueDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3998287072098601229L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CyclicalDailyValueDto\",\"namespace\":\"com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task\",\"doc\":\"Daily cyclical tariff value\",\"fields\":[{\"name\":\"dayOfTheWeek\",\"type\":{\"type\":\"enum\",\"name\":\"WeekdaysDto\",\"doc\":\"Defines days of week\",\"symbols\":[\"MONDAY\",\"TUESDAY\",\"WEDNESDAY\",\"THURSDAY\",\"FRIDAY\",\"SATURDAY\",\"SUNDAY\",\"ALL\",\"MONDAY_TO_FRIDAY\",\"WEEKEND\"]},\"doc\":\"To which day given values apply\"},{\"name\":\"dailyTimeValues\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"DailyTimeValueDto\",\"doc\":\"Value starting at given time\",\"fields\":[{\"name\":\"startTime\",\"type\":\"string\",\"doc\":\"Value starting time\"},{\"name\":\"currentValue\",\"type\":\"double\",\"doc\":\"Value applicable since startTime\"}]}},\"doc\":\"Daily values for given day\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CyclicalDailyValueDto> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CyclicalDailyValueDto> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CyclicalDailyValueDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CyclicalDailyValueDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CyclicalDailyValueDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CyclicalDailyValueDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CyclicalDailyValueDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CyclicalDailyValueDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CyclicalDailyValueDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** To which day given values apply */
  private com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.WeekdaysDto dayOfTheWeek;
  /** Daily values for given day */
  private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto> dailyTimeValues;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CyclicalDailyValueDto() {}

  /**
   * All-args constructor.
   * @param dayOfTheWeek To which day given values apply
   * @param dailyTimeValues Daily values for given day
   */
  public CyclicalDailyValueDto(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.WeekdaysDto dayOfTheWeek, java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto> dailyTimeValues) {
    this.dayOfTheWeek = dayOfTheWeek;
    this.dailyTimeValues = dailyTimeValues;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dayOfTheWeek;
    case 1: return dailyTimeValues;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dayOfTheWeek = (com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.WeekdaysDto)value$; break;
    case 1: dailyTimeValues = (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'dayOfTheWeek' field.
   * @return To which day given values apply
   */
  public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.WeekdaysDto getDayOfTheWeek() {
    return dayOfTheWeek;
  }


  /**
   * Sets the value of the 'dayOfTheWeek' field.
   * To which day given values apply
   * @param value the value to set.
   */
  public void setDayOfTheWeek(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.WeekdaysDto value) {
    this.dayOfTheWeek = value;
  }

  /**
   * Gets the value of the 'dailyTimeValues' field.
   * @return Daily values for given day
   */
  public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto> getDailyTimeValues() {
    return dailyTimeValues;
  }


  /**
   * Sets the value of the 'dailyTimeValues' field.
   * Daily values for given day
   * @param value the value to set.
   */
  public void setDailyTimeValues(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto> value) {
    this.dailyTimeValues = value;
  }

  /**
   * Creates a new CyclicalDailyValueDto RecordBuilder.
   * @return A new CyclicalDailyValueDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.CyclicalDailyValueDto.Builder newBuilder() {
    return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.CyclicalDailyValueDto.Builder();
  }

  /**
   * Creates a new CyclicalDailyValueDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CyclicalDailyValueDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.CyclicalDailyValueDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.CyclicalDailyValueDto.Builder other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.CyclicalDailyValueDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.CyclicalDailyValueDto.Builder(other);
    }
  }

  /**
   * Creates a new CyclicalDailyValueDto RecordBuilder by copying an existing CyclicalDailyValueDto instance.
   * @param other The existing instance to copy.
   * @return A new CyclicalDailyValueDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.CyclicalDailyValueDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.CyclicalDailyValueDto other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.CyclicalDailyValueDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.CyclicalDailyValueDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for CyclicalDailyValueDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CyclicalDailyValueDto>
    implements org.apache.avro.data.RecordBuilder<CyclicalDailyValueDto> {

    /** To which day given values apply */
    private com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.WeekdaysDto dayOfTheWeek;
    /** Daily values for given day */
    private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto> dailyTimeValues;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.CyclicalDailyValueDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dayOfTheWeek)) {
        this.dayOfTheWeek = data().deepCopy(fields()[0].schema(), other.dayOfTheWeek);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.dailyTimeValues)) {
        this.dailyTimeValues = data().deepCopy(fields()[1].schema(), other.dailyTimeValues);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing CyclicalDailyValueDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.CyclicalDailyValueDto other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.dayOfTheWeek)) {
        this.dayOfTheWeek = data().deepCopy(fields()[0].schema(), other.dayOfTheWeek);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dailyTimeValues)) {
        this.dailyTimeValues = data().deepCopy(fields()[1].schema(), other.dailyTimeValues);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'dayOfTheWeek' field.
      * To which day given values apply
      * @return The value.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.WeekdaysDto getDayOfTheWeek() {
      return dayOfTheWeek;
    }


    /**
      * Sets the value of the 'dayOfTheWeek' field.
      * To which day given values apply
      * @param value The value of 'dayOfTheWeek'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.CyclicalDailyValueDto.Builder setDayOfTheWeek(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.WeekdaysDto value) {
      validate(fields()[0], value);
      this.dayOfTheWeek = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'dayOfTheWeek' field has been set.
      * To which day given values apply
      * @return True if the 'dayOfTheWeek' field has been set, false otherwise.
      */
    public boolean hasDayOfTheWeek() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'dayOfTheWeek' field.
      * To which day given values apply
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.CyclicalDailyValueDto.Builder clearDayOfTheWeek() {
      dayOfTheWeek = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dailyTimeValues' field.
      * Daily values for given day
      * @return The value.
      */
    public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto> getDailyTimeValues() {
      return dailyTimeValues;
    }


    /**
      * Sets the value of the 'dailyTimeValues' field.
      * Daily values for given day
      * @param value The value of 'dailyTimeValues'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.CyclicalDailyValueDto.Builder setDailyTimeValues(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto> value) {
      validate(fields()[1], value);
      this.dailyTimeValues = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dailyTimeValues' field has been set.
      * Daily values for given day
      * @return True if the 'dailyTimeValues' field has been set, false otherwise.
      */
    public boolean hasDailyTimeValues() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dailyTimeValues' field.
      * Daily values for given day
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.CyclicalDailyValueDto.Builder clearDailyTimeValues() {
      dailyTimeValues = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CyclicalDailyValueDto build() {
      try {
        CyclicalDailyValueDto record = new CyclicalDailyValueDto();
        record.dayOfTheWeek = fieldSetFlags()[0] ? this.dayOfTheWeek : (com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.WeekdaysDto) defaultValue(fields()[0]);
        record.dailyTimeValues = fieldSetFlags()[1] ? this.dailyTimeValues : (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto>) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CyclicalDailyValueDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<CyclicalDailyValueDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CyclicalDailyValueDto>
    READER$ = (org.apache.avro.io.DatumReader<CyclicalDailyValueDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.dayOfTheWeek.ordinal());

    long size0 = this.dailyTimeValues.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto e0: this.dailyTimeValues) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.dayOfTheWeek = com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.WeekdaysDto.values()[in.readEnum()];

      long size0 = in.readArrayStart();
      java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto> a0 = this.dailyTimeValues;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto>((int)size0, SCHEMA$.getField("dailyTimeValues").schema());
        this.dailyTimeValues = a0;
      } else a0.clear();
      SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.dayOfTheWeek = com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.WeekdaysDto.values()[in.readEnum()];
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto> a0 = this.dailyTimeValues;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto>((int)size0, SCHEMA$.getField("dailyTimeValues").schema());
            this.dailyTimeValues = a0;
          } else a0.clear();
          SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










