/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Value starting at given time */
@org.apache.avro.specific.AvroGenerated
public class DailyTimeValueDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3194482877759757257L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DailyTimeValueDto\",\"namespace\":\"com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task\",\"doc\":\"Value starting at given time\",\"fields\":[{\"name\":\"startTime\",\"type\":\"string\",\"doc\":\"Value starting time\"},{\"name\":\"currentValue\",\"type\":\"double\",\"doc\":\"Value applicable since startTime\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DailyTimeValueDto> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DailyTimeValueDto> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DailyTimeValueDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DailyTimeValueDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DailyTimeValueDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DailyTimeValueDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DailyTimeValueDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DailyTimeValueDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DailyTimeValueDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Value starting time */
  private java.lang.CharSequence startTime;
  /** Value applicable since startTime */
  private double currentValue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DailyTimeValueDto() {}

  /**
   * All-args constructor.
   * @param startTime Value starting time
   * @param currentValue Value applicable since startTime
   */
  public DailyTimeValueDto(java.lang.CharSequence startTime, java.lang.Double currentValue) {
    this.startTime = startTime;
    this.currentValue = currentValue;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return startTime;
    case 1: return currentValue;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: startTime = (java.lang.CharSequence)value$; break;
    case 1: currentValue = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'startTime' field.
   * @return Value starting time
   */
  public java.lang.CharSequence getStartTime() {
    return startTime;
  }


  /**
   * Sets the value of the 'startTime' field.
   * Value starting time
   * @param value the value to set.
   */
  public void setStartTime(java.lang.CharSequence value) {
    this.startTime = value;
  }

  /**
   * Gets the value of the 'currentValue' field.
   * @return Value applicable since startTime
   */
  public double getCurrentValue() {
    return currentValue;
  }


  /**
   * Sets the value of the 'currentValue' field.
   * Value applicable since startTime
   * @param value the value to set.
   */
  public void setCurrentValue(double value) {
    this.currentValue = value;
  }

  /**
   * Creates a new DailyTimeValueDto RecordBuilder.
   * @return A new DailyTimeValueDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto.Builder newBuilder() {
    return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto.Builder();
  }

  /**
   * Creates a new DailyTimeValueDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DailyTimeValueDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto.Builder other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto.Builder(other);
    }
  }

  /**
   * Creates a new DailyTimeValueDto RecordBuilder by copying an existing DailyTimeValueDto instance.
   * @param other The existing instance to copy.
   * @return A new DailyTimeValueDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for DailyTimeValueDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DailyTimeValueDto>
    implements org.apache.avro.data.RecordBuilder<DailyTimeValueDto> {

    /** Value starting time */
    private java.lang.CharSequence startTime;
    /** Value applicable since startTime */
    private double currentValue;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.startTime)) {
        this.startTime = data().deepCopy(fields()[0].schema(), other.startTime);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.currentValue)) {
        this.currentValue = data().deepCopy(fields()[1].schema(), other.currentValue);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing DailyTimeValueDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.startTime)) {
        this.startTime = data().deepCopy(fields()[0].schema(), other.startTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.currentValue)) {
        this.currentValue = data().deepCopy(fields()[1].schema(), other.currentValue);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'startTime' field.
      * Value starting time
      * @return The value.
      */
    public java.lang.CharSequence getStartTime() {
      return startTime;
    }


    /**
      * Sets the value of the 'startTime' field.
      * Value starting time
      * @param value The value of 'startTime'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto.Builder setStartTime(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.startTime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'startTime' field has been set.
      * Value starting time
      * @return True if the 'startTime' field has been set, false otherwise.
      */
    public boolean hasStartTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'startTime' field.
      * Value starting time
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto.Builder clearStartTime() {
      startTime = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentValue' field.
      * Value applicable since startTime
      * @return The value.
      */
    public double getCurrentValue() {
      return currentValue;
    }


    /**
      * Sets the value of the 'currentValue' field.
      * Value applicable since startTime
      * @param value The value of 'currentValue'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto.Builder setCurrentValue(double value) {
      validate(fields()[1], value);
      this.currentValue = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'currentValue' field has been set.
      * Value applicable since startTime
      * @return True if the 'currentValue' field has been set, false otherwise.
      */
    public boolean hasCurrentValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'currentValue' field.
      * Value applicable since startTime
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.DailyTimeValueDto.Builder clearCurrentValue() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DailyTimeValueDto build() {
      try {
        DailyTimeValueDto record = new DailyTimeValueDto();
        record.startTime = fieldSetFlags()[0] ? this.startTime : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.currentValue = fieldSetFlags()[1] ? this.currentValue : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DailyTimeValueDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<DailyTimeValueDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DailyTimeValueDto>
    READER$ = (org.apache.avro.io.DatumReader<DailyTimeValueDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.startTime);

    out.writeDouble(this.currentValue);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.startTime = in.readString(this.startTime instanceof Utf8 ? (Utf8)this.startTime : null);

      this.currentValue = in.readDouble();

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.startTime = in.readString(this.startTime instanceof Utf8 ? (Utf8)this.startTime : null);
          break;

        case 1:
          this.currentValue = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










