/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StorageDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7860787989788882603L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StorageDto\",\"namespace\":\"com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"maxCharge\",\"type\":\"double\"},{\"name\":\"maxDischarge\",\"type\":\"double\"},{\"name\":\"maxCapacity\",\"type\":\"double\"},{\"name\":\"initialEnergy\",\"type\":\"double\"},{\"name\":\"minChargeConstraints\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"double\"}],\"doc\":\"Constraints on minimal charging power for intervals\",\"default\":null},{\"name\":\"maxChargeConstraints\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"double\"}],\"doc\":\"Constraints on maximal charging power for intervals\",\"default\":null},{\"name\":\"minDischargeConstraints\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"double\"}],\"doc\":\"Constraints on minimal discharging power for intervals\",\"default\":null},{\"name\":\"maxDischargeConstraints\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"double\"}],\"doc\":\"Constraints on maximal discharging power for intervals\",\"default\":null},{\"name\":\"minEnergyConstraints\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"double\"}],\"doc\":\"Constraints on minimal stored energy for intervals\",\"default\":null},{\"name\":\"maxEnergyConstraints\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"double\"}],\"doc\":\"Constraints on maximal stored energy power for intervals\",\"default\":null},{\"name\":\"forbiddenChargeIntervals\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"doc\":\"Set of intervals at which charging is forbidden\",\"default\":[]},{\"name\":\"forbiddenDischargeIntervals\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"doc\":\"Set of intervals at which discharging is forbidden\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StorageDto> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StorageDto> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StorageDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StorageDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StorageDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StorageDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StorageDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StorageDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StorageDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private java.lang.CharSequence name;
  private double maxCharge;
  private double maxDischarge;
  private double maxCapacity;
  private double initialEnergy;
  /** Constraints on minimal charging power for intervals */
  private java.util.Map<java.lang.CharSequence,java.lang.Double> minChargeConstraints;
  /** Constraints on maximal charging power for intervals */
  private java.util.Map<java.lang.CharSequence,java.lang.Double> maxChargeConstraints;
  /** Constraints on minimal discharging power for intervals */
  private java.util.Map<java.lang.CharSequence,java.lang.Double> minDischargeConstraints;
  /** Constraints on maximal discharging power for intervals */
  private java.util.Map<java.lang.CharSequence,java.lang.Double> maxDischargeConstraints;
  /** Constraints on minimal stored energy for intervals */
  private java.util.Map<java.lang.CharSequence,java.lang.Double> minEnergyConstraints;
  /** Constraints on maximal stored energy power for intervals */
  private java.util.Map<java.lang.CharSequence,java.lang.Double> maxEnergyConstraints;
  /** Set of intervals at which charging is forbidden */
  private java.util.List<java.lang.Integer> forbiddenChargeIntervals;
  /** Set of intervals at which discharging is forbidden */
  private java.util.List<java.lang.Integer> forbiddenDischargeIntervals;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StorageDto() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param maxCharge The new value for maxCharge
   * @param maxDischarge The new value for maxDischarge
   * @param maxCapacity The new value for maxCapacity
   * @param initialEnergy The new value for initialEnergy
   * @param minChargeConstraints Constraints on minimal charging power for intervals
   * @param maxChargeConstraints Constraints on maximal charging power for intervals
   * @param minDischargeConstraints Constraints on minimal discharging power for intervals
   * @param maxDischargeConstraints Constraints on maximal discharging power for intervals
   * @param minEnergyConstraints Constraints on minimal stored energy for intervals
   * @param maxEnergyConstraints Constraints on maximal stored energy power for intervals
   * @param forbiddenChargeIntervals Set of intervals at which charging is forbidden
   * @param forbiddenDischargeIntervals Set of intervals at which discharging is forbidden
   */
  public StorageDto(java.lang.Long id, java.lang.CharSequence name, java.lang.Double maxCharge, java.lang.Double maxDischarge, java.lang.Double maxCapacity, java.lang.Double initialEnergy, java.util.Map<java.lang.CharSequence,java.lang.Double> minChargeConstraints, java.util.Map<java.lang.CharSequence,java.lang.Double> maxChargeConstraints, java.util.Map<java.lang.CharSequence,java.lang.Double> minDischargeConstraints, java.util.Map<java.lang.CharSequence,java.lang.Double> maxDischargeConstraints, java.util.Map<java.lang.CharSequence,java.lang.Double> minEnergyConstraints, java.util.Map<java.lang.CharSequence,java.lang.Double> maxEnergyConstraints, java.util.List<java.lang.Integer> forbiddenChargeIntervals, java.util.List<java.lang.Integer> forbiddenDischargeIntervals) {
    this.id = id;
    this.name = name;
    this.maxCharge = maxCharge;
    this.maxDischarge = maxDischarge;
    this.maxCapacity = maxCapacity;
    this.initialEnergy = initialEnergy;
    this.minChargeConstraints = minChargeConstraints;
    this.maxChargeConstraints = maxChargeConstraints;
    this.minDischargeConstraints = minDischargeConstraints;
    this.maxDischargeConstraints = maxDischargeConstraints;
    this.minEnergyConstraints = minEnergyConstraints;
    this.maxEnergyConstraints = maxEnergyConstraints;
    this.forbiddenChargeIntervals = forbiddenChargeIntervals;
    this.forbiddenDischargeIntervals = forbiddenDischargeIntervals;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return maxCharge;
    case 3: return maxDischarge;
    case 4: return maxCapacity;
    case 5: return initialEnergy;
    case 6: return minChargeConstraints;
    case 7: return maxChargeConstraints;
    case 8: return minDischargeConstraints;
    case 9: return maxDischargeConstraints;
    case 10: return minEnergyConstraints;
    case 11: return maxEnergyConstraints;
    case 12: return forbiddenChargeIntervals;
    case 13: return forbiddenDischargeIntervals;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: maxCharge = (java.lang.Double)value$; break;
    case 3: maxDischarge = (java.lang.Double)value$; break;
    case 4: maxCapacity = (java.lang.Double)value$; break;
    case 5: initialEnergy = (java.lang.Double)value$; break;
    case 6: minChargeConstraints = (java.util.Map<java.lang.CharSequence,java.lang.Double>)value$; break;
    case 7: maxChargeConstraints = (java.util.Map<java.lang.CharSequence,java.lang.Double>)value$; break;
    case 8: minDischargeConstraints = (java.util.Map<java.lang.CharSequence,java.lang.Double>)value$; break;
    case 9: maxDischargeConstraints = (java.util.Map<java.lang.CharSequence,java.lang.Double>)value$; break;
    case 10: minEnergyConstraints = (java.util.Map<java.lang.CharSequence,java.lang.Double>)value$; break;
    case 11: maxEnergyConstraints = (java.util.Map<java.lang.CharSequence,java.lang.Double>)value$; break;
    case 12: forbiddenChargeIntervals = (java.util.List<java.lang.Integer>)value$; break;
    case 13: forbiddenDischargeIntervals = (java.util.List<java.lang.Integer>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'maxCharge' field.
   * @return The value of the 'maxCharge' field.
   */
  public double getMaxCharge() {
    return maxCharge;
  }


  /**
   * Sets the value of the 'maxCharge' field.
   * @param value the value to set.
   */
  public void setMaxCharge(double value) {
    this.maxCharge = value;
  }

  /**
   * Gets the value of the 'maxDischarge' field.
   * @return The value of the 'maxDischarge' field.
   */
  public double getMaxDischarge() {
    return maxDischarge;
  }


  /**
   * Sets the value of the 'maxDischarge' field.
   * @param value the value to set.
   */
  public void setMaxDischarge(double value) {
    this.maxDischarge = value;
  }

  /**
   * Gets the value of the 'maxCapacity' field.
   * @return The value of the 'maxCapacity' field.
   */
  public double getMaxCapacity() {
    return maxCapacity;
  }


  /**
   * Sets the value of the 'maxCapacity' field.
   * @param value the value to set.
   */
  public void setMaxCapacity(double value) {
    this.maxCapacity = value;
  }

  /**
   * Gets the value of the 'initialEnergy' field.
   * @return The value of the 'initialEnergy' field.
   */
  public double getInitialEnergy() {
    return initialEnergy;
  }


  /**
   * Sets the value of the 'initialEnergy' field.
   * @param value the value to set.
   */
  public void setInitialEnergy(double value) {
    this.initialEnergy = value;
  }

  /**
   * Gets the value of the 'minChargeConstraints' field.
   * @return Constraints on minimal charging power for intervals
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Double> getMinChargeConstraints() {
    return minChargeConstraints;
  }


  /**
   * Sets the value of the 'minChargeConstraints' field.
   * Constraints on minimal charging power for intervals
   * @param value the value to set.
   */
  public void setMinChargeConstraints(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
    this.minChargeConstraints = value;
  }

  /**
   * Gets the value of the 'maxChargeConstraints' field.
   * @return Constraints on maximal charging power for intervals
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Double> getMaxChargeConstraints() {
    return maxChargeConstraints;
  }


  /**
   * Sets the value of the 'maxChargeConstraints' field.
   * Constraints on maximal charging power for intervals
   * @param value the value to set.
   */
  public void setMaxChargeConstraints(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
    this.maxChargeConstraints = value;
  }

  /**
   * Gets the value of the 'minDischargeConstraints' field.
   * @return Constraints on minimal discharging power for intervals
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Double> getMinDischargeConstraints() {
    return minDischargeConstraints;
  }


  /**
   * Sets the value of the 'minDischargeConstraints' field.
   * Constraints on minimal discharging power for intervals
   * @param value the value to set.
   */
  public void setMinDischargeConstraints(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
    this.minDischargeConstraints = value;
  }

  /**
   * Gets the value of the 'maxDischargeConstraints' field.
   * @return Constraints on maximal discharging power for intervals
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Double> getMaxDischargeConstraints() {
    return maxDischargeConstraints;
  }


  /**
   * Sets the value of the 'maxDischargeConstraints' field.
   * Constraints on maximal discharging power for intervals
   * @param value the value to set.
   */
  public void setMaxDischargeConstraints(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
    this.maxDischargeConstraints = value;
  }

  /**
   * Gets the value of the 'minEnergyConstraints' field.
   * @return Constraints on minimal stored energy for intervals
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Double> getMinEnergyConstraints() {
    return minEnergyConstraints;
  }


  /**
   * Sets the value of the 'minEnergyConstraints' field.
   * Constraints on minimal stored energy for intervals
   * @param value the value to set.
   */
  public void setMinEnergyConstraints(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
    this.minEnergyConstraints = value;
  }

  /**
   * Gets the value of the 'maxEnergyConstraints' field.
   * @return Constraints on maximal stored energy power for intervals
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Double> getMaxEnergyConstraints() {
    return maxEnergyConstraints;
  }


  /**
   * Sets the value of the 'maxEnergyConstraints' field.
   * Constraints on maximal stored energy power for intervals
   * @param value the value to set.
   */
  public void setMaxEnergyConstraints(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
    this.maxEnergyConstraints = value;
  }

  /**
   * Gets the value of the 'forbiddenChargeIntervals' field.
   * @return Set of intervals at which charging is forbidden
   */
  public java.util.List<java.lang.Integer> getForbiddenChargeIntervals() {
    return forbiddenChargeIntervals;
  }


  /**
   * Sets the value of the 'forbiddenChargeIntervals' field.
   * Set of intervals at which charging is forbidden
   * @param value the value to set.
   */
  public void setForbiddenChargeIntervals(java.util.List<java.lang.Integer> value) {
    this.forbiddenChargeIntervals = value;
  }

  /**
   * Gets the value of the 'forbiddenDischargeIntervals' field.
   * @return Set of intervals at which discharging is forbidden
   */
  public java.util.List<java.lang.Integer> getForbiddenDischargeIntervals() {
    return forbiddenDischargeIntervals;
  }


  /**
   * Sets the value of the 'forbiddenDischargeIntervals' field.
   * Set of intervals at which discharging is forbidden
   * @param value the value to set.
   */
  public void setForbiddenDischargeIntervals(java.util.List<java.lang.Integer> value) {
    this.forbiddenDischargeIntervals = value;
  }

  /**
   * Creates a new StorageDto RecordBuilder.
   * @return A new StorageDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder newBuilder() {
    return new com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder();
  }

  /**
   * Creates a new StorageDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StorageDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder(other);
    }
  }

  /**
   * Creates a new StorageDto RecordBuilder by copying an existing StorageDto instance.
   * @param other The existing instance to copy.
   * @return A new StorageDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for StorageDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StorageDto>
    implements org.apache.avro.data.RecordBuilder<StorageDto> {

    private long id;
    private java.lang.CharSequence name;
    private double maxCharge;
    private double maxDischarge;
    private double maxCapacity;
    private double initialEnergy;
    /** Constraints on minimal charging power for intervals */
    private java.util.Map<java.lang.CharSequence,java.lang.Double> minChargeConstraints;
    /** Constraints on maximal charging power for intervals */
    private java.util.Map<java.lang.CharSequence,java.lang.Double> maxChargeConstraints;
    /** Constraints on minimal discharging power for intervals */
    private java.util.Map<java.lang.CharSequence,java.lang.Double> minDischargeConstraints;
    /** Constraints on maximal discharging power for intervals */
    private java.util.Map<java.lang.CharSequence,java.lang.Double> maxDischargeConstraints;
    /** Constraints on minimal stored energy for intervals */
    private java.util.Map<java.lang.CharSequence,java.lang.Double> minEnergyConstraints;
    /** Constraints on maximal stored energy power for intervals */
    private java.util.Map<java.lang.CharSequence,java.lang.Double> maxEnergyConstraints;
    /** Set of intervals at which charging is forbidden */
    private java.util.List<java.lang.Integer> forbiddenChargeIntervals;
    /** Set of intervals at which discharging is forbidden */
    private java.util.List<java.lang.Integer> forbiddenDischargeIntervals;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.maxCharge)) {
        this.maxCharge = data().deepCopy(fields()[2].schema(), other.maxCharge);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.maxDischarge)) {
        this.maxDischarge = data().deepCopy(fields()[3].schema(), other.maxDischarge);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.maxCapacity)) {
        this.maxCapacity = data().deepCopy(fields()[4].schema(), other.maxCapacity);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.initialEnergy)) {
        this.initialEnergy = data().deepCopy(fields()[5].schema(), other.initialEnergy);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.minChargeConstraints)) {
        this.minChargeConstraints = data().deepCopy(fields()[6].schema(), other.minChargeConstraints);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.maxChargeConstraints)) {
        this.maxChargeConstraints = data().deepCopy(fields()[7].schema(), other.maxChargeConstraints);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.minDischargeConstraints)) {
        this.minDischargeConstraints = data().deepCopy(fields()[8].schema(), other.minDischargeConstraints);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.maxDischargeConstraints)) {
        this.maxDischargeConstraints = data().deepCopy(fields()[9].schema(), other.maxDischargeConstraints);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.minEnergyConstraints)) {
        this.minEnergyConstraints = data().deepCopy(fields()[10].schema(), other.minEnergyConstraints);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.maxEnergyConstraints)) {
        this.maxEnergyConstraints = data().deepCopy(fields()[11].schema(), other.maxEnergyConstraints);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.forbiddenChargeIntervals)) {
        this.forbiddenChargeIntervals = data().deepCopy(fields()[12].schema(), other.forbiddenChargeIntervals);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.forbiddenDischargeIntervals)) {
        this.forbiddenDischargeIntervals = data().deepCopy(fields()[13].schema(), other.forbiddenDischargeIntervals);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing StorageDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.maxCharge)) {
        this.maxCharge = data().deepCopy(fields()[2].schema(), other.maxCharge);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.maxDischarge)) {
        this.maxDischarge = data().deepCopy(fields()[3].schema(), other.maxDischarge);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.maxCapacity)) {
        this.maxCapacity = data().deepCopy(fields()[4].schema(), other.maxCapacity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.initialEnergy)) {
        this.initialEnergy = data().deepCopy(fields()[5].schema(), other.initialEnergy);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.minChargeConstraints)) {
        this.minChargeConstraints = data().deepCopy(fields()[6].schema(), other.minChargeConstraints);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.maxChargeConstraints)) {
        this.maxChargeConstraints = data().deepCopy(fields()[7].schema(), other.maxChargeConstraints);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.minDischargeConstraints)) {
        this.minDischargeConstraints = data().deepCopy(fields()[8].schema(), other.minDischargeConstraints);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.maxDischargeConstraints)) {
        this.maxDischargeConstraints = data().deepCopy(fields()[9].schema(), other.maxDischargeConstraints);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.minEnergyConstraints)) {
        this.minEnergyConstraints = data().deepCopy(fields()[10].schema(), other.minEnergyConstraints);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.maxEnergyConstraints)) {
        this.maxEnergyConstraints = data().deepCopy(fields()[11].schema(), other.maxEnergyConstraints);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.forbiddenChargeIntervals)) {
        this.forbiddenChargeIntervals = data().deepCopy(fields()[12].schema(), other.forbiddenChargeIntervals);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.forbiddenDischargeIntervals)) {
        this.forbiddenDischargeIntervals = data().deepCopy(fields()[13].schema(), other.forbiddenDischargeIntervals);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxCharge' field.
      * @return The value.
      */
    public double getMaxCharge() {
      return maxCharge;
    }


    /**
      * Sets the value of the 'maxCharge' field.
      * @param value The value of 'maxCharge'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder setMaxCharge(double value) {
      validate(fields()[2], value);
      this.maxCharge = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'maxCharge' field has been set.
      * @return True if the 'maxCharge' field has been set, false otherwise.
      */
    public boolean hasMaxCharge() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'maxCharge' field.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder clearMaxCharge() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxDischarge' field.
      * @return The value.
      */
    public double getMaxDischarge() {
      return maxDischarge;
    }


    /**
      * Sets the value of the 'maxDischarge' field.
      * @param value The value of 'maxDischarge'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder setMaxDischarge(double value) {
      validate(fields()[3], value);
      this.maxDischarge = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'maxDischarge' field has been set.
      * @return True if the 'maxDischarge' field has been set, false otherwise.
      */
    public boolean hasMaxDischarge() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'maxDischarge' field.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder clearMaxDischarge() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxCapacity' field.
      * @return The value.
      */
    public double getMaxCapacity() {
      return maxCapacity;
    }


    /**
      * Sets the value of the 'maxCapacity' field.
      * @param value The value of 'maxCapacity'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder setMaxCapacity(double value) {
      validate(fields()[4], value);
      this.maxCapacity = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'maxCapacity' field has been set.
      * @return True if the 'maxCapacity' field has been set, false otherwise.
      */
    public boolean hasMaxCapacity() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'maxCapacity' field.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder clearMaxCapacity() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'initialEnergy' field.
      * @return The value.
      */
    public double getInitialEnergy() {
      return initialEnergy;
    }


    /**
      * Sets the value of the 'initialEnergy' field.
      * @param value The value of 'initialEnergy'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder setInitialEnergy(double value) {
      validate(fields()[5], value);
      this.initialEnergy = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'initialEnergy' field has been set.
      * @return True if the 'initialEnergy' field has been set, false otherwise.
      */
    public boolean hasInitialEnergy() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'initialEnergy' field.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder clearInitialEnergy() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'minChargeConstraints' field.
      * Constraints on minimal charging power for intervals
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Double> getMinChargeConstraints() {
      return minChargeConstraints;
    }


    /**
      * Sets the value of the 'minChargeConstraints' field.
      * Constraints on minimal charging power for intervals
      * @param value The value of 'minChargeConstraints'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder setMinChargeConstraints(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
      validate(fields()[6], value);
      this.minChargeConstraints = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'minChargeConstraints' field has been set.
      * Constraints on minimal charging power for intervals
      * @return True if the 'minChargeConstraints' field has been set, false otherwise.
      */
    public boolean hasMinChargeConstraints() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'minChargeConstraints' field.
      * Constraints on minimal charging power for intervals
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder clearMinChargeConstraints() {
      minChargeConstraints = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxChargeConstraints' field.
      * Constraints on maximal charging power for intervals
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Double> getMaxChargeConstraints() {
      return maxChargeConstraints;
    }


    /**
      * Sets the value of the 'maxChargeConstraints' field.
      * Constraints on maximal charging power for intervals
      * @param value The value of 'maxChargeConstraints'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder setMaxChargeConstraints(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
      validate(fields()[7], value);
      this.maxChargeConstraints = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'maxChargeConstraints' field has been set.
      * Constraints on maximal charging power for intervals
      * @return True if the 'maxChargeConstraints' field has been set, false otherwise.
      */
    public boolean hasMaxChargeConstraints() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'maxChargeConstraints' field.
      * Constraints on maximal charging power for intervals
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder clearMaxChargeConstraints() {
      maxChargeConstraints = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'minDischargeConstraints' field.
      * Constraints on minimal discharging power for intervals
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Double> getMinDischargeConstraints() {
      return minDischargeConstraints;
    }


    /**
      * Sets the value of the 'minDischargeConstraints' field.
      * Constraints on minimal discharging power for intervals
      * @param value The value of 'minDischargeConstraints'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder setMinDischargeConstraints(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
      validate(fields()[8], value);
      this.minDischargeConstraints = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'minDischargeConstraints' field has been set.
      * Constraints on minimal discharging power for intervals
      * @return True if the 'minDischargeConstraints' field has been set, false otherwise.
      */
    public boolean hasMinDischargeConstraints() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'minDischargeConstraints' field.
      * Constraints on minimal discharging power for intervals
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder clearMinDischargeConstraints() {
      minDischargeConstraints = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxDischargeConstraints' field.
      * Constraints on maximal discharging power for intervals
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Double> getMaxDischargeConstraints() {
      return maxDischargeConstraints;
    }


    /**
      * Sets the value of the 'maxDischargeConstraints' field.
      * Constraints on maximal discharging power for intervals
      * @param value The value of 'maxDischargeConstraints'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder setMaxDischargeConstraints(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
      validate(fields()[9], value);
      this.maxDischargeConstraints = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'maxDischargeConstraints' field has been set.
      * Constraints on maximal discharging power for intervals
      * @return True if the 'maxDischargeConstraints' field has been set, false otherwise.
      */
    public boolean hasMaxDischargeConstraints() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'maxDischargeConstraints' field.
      * Constraints on maximal discharging power for intervals
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder clearMaxDischargeConstraints() {
      maxDischargeConstraints = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'minEnergyConstraints' field.
      * Constraints on minimal stored energy for intervals
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Double> getMinEnergyConstraints() {
      return minEnergyConstraints;
    }


    /**
      * Sets the value of the 'minEnergyConstraints' field.
      * Constraints on minimal stored energy for intervals
      * @param value The value of 'minEnergyConstraints'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder setMinEnergyConstraints(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
      validate(fields()[10], value);
      this.minEnergyConstraints = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'minEnergyConstraints' field has been set.
      * Constraints on minimal stored energy for intervals
      * @return True if the 'minEnergyConstraints' field has been set, false otherwise.
      */
    public boolean hasMinEnergyConstraints() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'minEnergyConstraints' field.
      * Constraints on minimal stored energy for intervals
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder clearMinEnergyConstraints() {
      minEnergyConstraints = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxEnergyConstraints' field.
      * Constraints on maximal stored energy power for intervals
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Double> getMaxEnergyConstraints() {
      return maxEnergyConstraints;
    }


    /**
      * Sets the value of the 'maxEnergyConstraints' field.
      * Constraints on maximal stored energy power for intervals
      * @param value The value of 'maxEnergyConstraints'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder setMaxEnergyConstraints(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
      validate(fields()[11], value);
      this.maxEnergyConstraints = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'maxEnergyConstraints' field has been set.
      * Constraints on maximal stored energy power for intervals
      * @return True if the 'maxEnergyConstraints' field has been set, false otherwise.
      */
    public boolean hasMaxEnergyConstraints() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'maxEnergyConstraints' field.
      * Constraints on maximal stored energy power for intervals
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder clearMaxEnergyConstraints() {
      maxEnergyConstraints = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'forbiddenChargeIntervals' field.
      * Set of intervals at which charging is forbidden
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getForbiddenChargeIntervals() {
      return forbiddenChargeIntervals;
    }


    /**
      * Sets the value of the 'forbiddenChargeIntervals' field.
      * Set of intervals at which charging is forbidden
      * @param value The value of 'forbiddenChargeIntervals'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder setForbiddenChargeIntervals(java.util.List<java.lang.Integer> value) {
      validate(fields()[12], value);
      this.forbiddenChargeIntervals = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'forbiddenChargeIntervals' field has been set.
      * Set of intervals at which charging is forbidden
      * @return True if the 'forbiddenChargeIntervals' field has been set, false otherwise.
      */
    public boolean hasForbiddenChargeIntervals() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'forbiddenChargeIntervals' field.
      * Set of intervals at which charging is forbidden
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder clearForbiddenChargeIntervals() {
      forbiddenChargeIntervals = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'forbiddenDischargeIntervals' field.
      * Set of intervals at which discharging is forbidden
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getForbiddenDischargeIntervals() {
      return forbiddenDischargeIntervals;
    }


    /**
      * Sets the value of the 'forbiddenDischargeIntervals' field.
      * Set of intervals at which discharging is forbidden
      * @param value The value of 'forbiddenDischargeIntervals'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder setForbiddenDischargeIntervals(java.util.List<java.lang.Integer> value) {
      validate(fields()[13], value);
      this.forbiddenDischargeIntervals = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'forbiddenDischargeIntervals' field has been set.
      * Set of intervals at which discharging is forbidden
      * @return True if the 'forbiddenDischargeIntervals' field has been set, false otherwise.
      */
    public boolean hasForbiddenDischargeIntervals() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'forbiddenDischargeIntervals' field.
      * Set of intervals at which discharging is forbidden
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.optimizer.task.StorageDto.Builder clearForbiddenDischargeIntervals() {
      forbiddenDischargeIntervals = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StorageDto build() {
      try {
        StorageDto record = new StorageDto();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.maxCharge = fieldSetFlags()[2] ? this.maxCharge : (java.lang.Double) defaultValue(fields()[2]);
        record.maxDischarge = fieldSetFlags()[3] ? this.maxDischarge : (java.lang.Double) defaultValue(fields()[3]);
        record.maxCapacity = fieldSetFlags()[4] ? this.maxCapacity : (java.lang.Double) defaultValue(fields()[4]);
        record.initialEnergy = fieldSetFlags()[5] ? this.initialEnergy : (java.lang.Double) defaultValue(fields()[5]);
        record.minChargeConstraints = fieldSetFlags()[6] ? this.minChargeConstraints : (java.util.Map<java.lang.CharSequence,java.lang.Double>) defaultValue(fields()[6]);
        record.maxChargeConstraints = fieldSetFlags()[7] ? this.maxChargeConstraints : (java.util.Map<java.lang.CharSequence,java.lang.Double>) defaultValue(fields()[7]);
        record.minDischargeConstraints = fieldSetFlags()[8] ? this.minDischargeConstraints : (java.util.Map<java.lang.CharSequence,java.lang.Double>) defaultValue(fields()[8]);
        record.maxDischargeConstraints = fieldSetFlags()[9] ? this.maxDischargeConstraints : (java.util.Map<java.lang.CharSequence,java.lang.Double>) defaultValue(fields()[9]);
        record.minEnergyConstraints = fieldSetFlags()[10] ? this.minEnergyConstraints : (java.util.Map<java.lang.CharSequence,java.lang.Double>) defaultValue(fields()[10]);
        record.maxEnergyConstraints = fieldSetFlags()[11] ? this.maxEnergyConstraints : (java.util.Map<java.lang.CharSequence,java.lang.Double>) defaultValue(fields()[11]);
        record.forbiddenChargeIntervals = fieldSetFlags()[12] ? this.forbiddenChargeIntervals : (java.util.List<java.lang.Integer>) defaultValue(fields()[12]);
        record.forbiddenDischargeIntervals = fieldSetFlags()[13] ? this.forbiddenDischargeIntervals : (java.util.List<java.lang.Integer>) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StorageDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<StorageDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StorageDto>
    READER$ = (org.apache.avro.io.DatumReader<StorageDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeString(this.name);

    out.writeDouble(this.maxCharge);

    out.writeDouble(this.maxDischarge);

    out.writeDouble(this.maxCapacity);

    out.writeDouble(this.initialEnergy);

    if (this.minChargeConstraints == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.minChargeConstraints.size();
      out.writeMapStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.lang.Double> e0: this.minChargeConstraints.entrySet()) {
        actualSize0++;
        out.startItem();
        out.writeString(e0.getKey());
        java.lang.Double v0 = e0.getValue();
        out.writeDouble(v0);
      }
      out.writeMapEnd();
      if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.maxChargeConstraints == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.maxChargeConstraints.size();
      out.writeMapStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.lang.Double> e1: this.maxChargeConstraints.entrySet()) {
        actualSize1++;
        out.startItem();
        out.writeString(e1.getKey());
        java.lang.Double v1 = e1.getValue();
        out.writeDouble(v1);
      }
      out.writeMapEnd();
      if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

    if (this.minDischargeConstraints == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size2 = this.minDischargeConstraints.size();
      out.writeMapStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.lang.Double> e2: this.minDischargeConstraints.entrySet()) {
        actualSize2++;
        out.startItem();
        out.writeString(e2.getKey());
        java.lang.Double v2 = e2.getValue();
        out.writeDouble(v2);
      }
      out.writeMapEnd();
      if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }

    if (this.maxDischargeConstraints == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size3 = this.maxDischargeConstraints.size();
      out.writeMapStart();
      out.setItemCount(size3);
      long actualSize3 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.lang.Double> e3: this.maxDischargeConstraints.entrySet()) {
        actualSize3++;
        out.startItem();
        out.writeString(e3.getKey());
        java.lang.Double v3 = e3.getValue();
        out.writeDouble(v3);
      }
      out.writeMapEnd();
      if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size3 + ", but element count was " + actualSize3 + ".");
    }

    if (this.minEnergyConstraints == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size4 = this.minEnergyConstraints.size();
      out.writeMapStart();
      out.setItemCount(size4);
      long actualSize4 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.lang.Double> e4: this.minEnergyConstraints.entrySet()) {
        actualSize4++;
        out.startItem();
        out.writeString(e4.getKey());
        java.lang.Double v4 = e4.getValue();
        out.writeDouble(v4);
      }
      out.writeMapEnd();
      if (actualSize4 != size4)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size4 + ", but element count was " + actualSize4 + ".");
    }

    if (this.maxEnergyConstraints == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size5 = this.maxEnergyConstraints.size();
      out.writeMapStart();
      out.setItemCount(size5);
      long actualSize5 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.lang.Double> e5: this.maxEnergyConstraints.entrySet()) {
        actualSize5++;
        out.startItem();
        out.writeString(e5.getKey());
        java.lang.Double v5 = e5.getValue();
        out.writeDouble(v5);
      }
      out.writeMapEnd();
      if (actualSize5 != size5)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size5 + ", but element count was " + actualSize5 + ".");
    }

    long size6 = this.forbiddenChargeIntervals.size();
    out.writeArrayStart();
    out.setItemCount(size6);
    long actualSize6 = 0;
    for (java.lang.Integer e6: this.forbiddenChargeIntervals) {
      actualSize6++;
      out.startItem();
      out.writeInt(e6);
    }
    out.writeArrayEnd();
    if (actualSize6 != size6)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size6 + ", but element count was " + actualSize6 + ".");

    long size7 = this.forbiddenDischargeIntervals.size();
    out.writeArrayStart();
    out.setItemCount(size7);
    long actualSize7 = 0;
    for (java.lang.Integer e7: this.forbiddenDischargeIntervals) {
      actualSize7++;
      out.startItem();
      out.writeInt(e7);
    }
    out.writeArrayEnd();
    if (actualSize7 != size7)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size7 + ", but element count was " + actualSize7 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.maxCharge = in.readDouble();

      this.maxDischarge = in.readDouble();

      this.maxCapacity = in.readDouble();

      this.initialEnergy = in.readDouble();

      if (in.readIndex() != 1) {
        in.readNull();
        this.minChargeConstraints = null;
      } else {
        long size0 = in.readMapStart();
        java.util.Map<java.lang.CharSequence,java.lang.Double> m0 = this.minChargeConstraints; // Need fresh name due to limitation of macro system
        if (m0 == null) {
          m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size0);
          this.minChargeConstraints = m0;
        } else m0.clear();
        for ( ; 0 < size0; size0 = in.mapNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence k0 = null;
            k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
            java.lang.Double v0 = null;
            v0 = in.readDouble();
            m0.put(k0, v0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.maxChargeConstraints = null;
      } else {
        long size1 = in.readMapStart();
        java.util.Map<java.lang.CharSequence,java.lang.Double> m1 = this.maxChargeConstraints; // Need fresh name due to limitation of macro system
        if (m1 == null) {
          m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size1);
          this.maxChargeConstraints = m1;
        } else m1.clear();
        for ( ; 0 < size1; size1 = in.mapNext()) {
          for ( ; size1 != 0; size1--) {
            java.lang.CharSequence k1 = null;
            k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
            java.lang.Double v1 = null;
            v1 = in.readDouble();
            m1.put(k1, v1);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.minDischargeConstraints = null;
      } else {
        long size2 = in.readMapStart();
        java.util.Map<java.lang.CharSequence,java.lang.Double> m2 = this.minDischargeConstraints; // Need fresh name due to limitation of macro system
        if (m2 == null) {
          m2 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size2);
          this.minDischargeConstraints = m2;
        } else m2.clear();
        for ( ; 0 < size2; size2 = in.mapNext()) {
          for ( ; size2 != 0; size2--) {
            java.lang.CharSequence k2 = null;
            k2 = in.readString(k2 instanceof Utf8 ? (Utf8)k2 : null);
            java.lang.Double v2 = null;
            v2 = in.readDouble();
            m2.put(k2, v2);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.maxDischargeConstraints = null;
      } else {
        long size3 = in.readMapStart();
        java.util.Map<java.lang.CharSequence,java.lang.Double> m3 = this.maxDischargeConstraints; // Need fresh name due to limitation of macro system
        if (m3 == null) {
          m3 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size3);
          this.maxDischargeConstraints = m3;
        } else m3.clear();
        for ( ; 0 < size3; size3 = in.mapNext()) {
          for ( ; size3 != 0; size3--) {
            java.lang.CharSequence k3 = null;
            k3 = in.readString(k3 instanceof Utf8 ? (Utf8)k3 : null);
            java.lang.Double v3 = null;
            v3 = in.readDouble();
            m3.put(k3, v3);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.minEnergyConstraints = null;
      } else {
        long size4 = in.readMapStart();
        java.util.Map<java.lang.CharSequence,java.lang.Double> m4 = this.minEnergyConstraints; // Need fresh name due to limitation of macro system
        if (m4 == null) {
          m4 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size4);
          this.minEnergyConstraints = m4;
        } else m4.clear();
        for ( ; 0 < size4; size4 = in.mapNext()) {
          for ( ; size4 != 0; size4--) {
            java.lang.CharSequence k4 = null;
            k4 = in.readString(k4 instanceof Utf8 ? (Utf8)k4 : null);
            java.lang.Double v4 = null;
            v4 = in.readDouble();
            m4.put(k4, v4);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.maxEnergyConstraints = null;
      } else {
        long size5 = in.readMapStart();
        java.util.Map<java.lang.CharSequence,java.lang.Double> m5 = this.maxEnergyConstraints; // Need fresh name due to limitation of macro system
        if (m5 == null) {
          m5 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size5);
          this.maxEnergyConstraints = m5;
        } else m5.clear();
        for ( ; 0 < size5; size5 = in.mapNext()) {
          for ( ; size5 != 0; size5--) {
            java.lang.CharSequence k5 = null;
            k5 = in.readString(k5 instanceof Utf8 ? (Utf8)k5 : null);
            java.lang.Double v5 = null;
            v5 = in.readDouble();
            m5.put(k5, v5);
          }
        }
      }

      long size6 = in.readArrayStart();
      java.util.List<java.lang.Integer> a6 = this.forbiddenChargeIntervals;
      if (a6 == null) {
        a6 = new SpecificData.Array<java.lang.Integer>((int)size6, SCHEMA$.getField("forbiddenChargeIntervals").schema());
        this.forbiddenChargeIntervals = a6;
      } else a6.clear();
      SpecificData.Array<java.lang.Integer> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a6 : null);
      for ( ; 0 < size6; size6 = in.arrayNext()) {
        for ( ; size6 != 0; size6--) {
          java.lang.Integer e6 = (ga6 != null ? ga6.peek() : null);
          e6 = in.readInt();
          a6.add(e6);
        }
      }

      long size7 = in.readArrayStart();
      java.util.List<java.lang.Integer> a7 = this.forbiddenDischargeIntervals;
      if (a7 == null) {
        a7 = new SpecificData.Array<java.lang.Integer>((int)size7, SCHEMA$.getField("forbiddenDischargeIntervals").schema());
        this.forbiddenDischargeIntervals = a7;
      } else a7.clear();
      SpecificData.Array<java.lang.Integer> ga7 = (a7 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a7 : null);
      for ( ; 0 < size7; size7 = in.arrayNext()) {
        for ( ; size7 != 0; size7--) {
          java.lang.Integer e7 = (ga7 != null ? ga7.peek() : null);
          e7 = in.readInt();
          a7.add(e7);
        }
      }

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 2:
          this.maxCharge = in.readDouble();
          break;

        case 3:
          this.maxDischarge = in.readDouble();
          break;

        case 4:
          this.maxCapacity = in.readDouble();
          break;

        case 5:
          this.initialEnergy = in.readDouble();
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.minChargeConstraints = null;
          } else {
            long size0 = in.readMapStart();
            java.util.Map<java.lang.CharSequence,java.lang.Double> m0 = this.minChargeConstraints; // Need fresh name due to limitation of macro system
            if (m0 == null) {
              m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size0);
              this.minChargeConstraints = m0;
            } else m0.clear();
            for ( ; 0 < size0; size0 = in.mapNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence k0 = null;
                k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
                java.lang.Double v0 = null;
                v0 = in.readDouble();
                m0.put(k0, v0);
              }
            }
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.maxChargeConstraints = null;
          } else {
            long size1 = in.readMapStart();
            java.util.Map<java.lang.CharSequence,java.lang.Double> m1 = this.maxChargeConstraints; // Need fresh name due to limitation of macro system
            if (m1 == null) {
              m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size1);
              this.maxChargeConstraints = m1;
            } else m1.clear();
            for ( ; 0 < size1; size1 = in.mapNext()) {
              for ( ; size1 != 0; size1--) {
                java.lang.CharSequence k1 = null;
                k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
                java.lang.Double v1 = null;
                v1 = in.readDouble();
                m1.put(k1, v1);
              }
            }
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.minDischargeConstraints = null;
          } else {
            long size2 = in.readMapStart();
            java.util.Map<java.lang.CharSequence,java.lang.Double> m2 = this.minDischargeConstraints; // Need fresh name due to limitation of macro system
            if (m2 == null) {
              m2 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size2);
              this.minDischargeConstraints = m2;
            } else m2.clear();
            for ( ; 0 < size2; size2 = in.mapNext()) {
              for ( ; size2 != 0; size2--) {
                java.lang.CharSequence k2 = null;
                k2 = in.readString(k2 instanceof Utf8 ? (Utf8)k2 : null);
                java.lang.Double v2 = null;
                v2 = in.readDouble();
                m2.put(k2, v2);
              }
            }
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.maxDischargeConstraints = null;
          } else {
            long size3 = in.readMapStart();
            java.util.Map<java.lang.CharSequence,java.lang.Double> m3 = this.maxDischargeConstraints; // Need fresh name due to limitation of macro system
            if (m3 == null) {
              m3 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size3);
              this.maxDischargeConstraints = m3;
            } else m3.clear();
            for ( ; 0 < size3; size3 = in.mapNext()) {
              for ( ; size3 != 0; size3--) {
                java.lang.CharSequence k3 = null;
                k3 = in.readString(k3 instanceof Utf8 ? (Utf8)k3 : null);
                java.lang.Double v3 = null;
                v3 = in.readDouble();
                m3.put(k3, v3);
              }
            }
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.minEnergyConstraints = null;
          } else {
            long size4 = in.readMapStart();
            java.util.Map<java.lang.CharSequence,java.lang.Double> m4 = this.minEnergyConstraints; // Need fresh name due to limitation of macro system
            if (m4 == null) {
              m4 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size4);
              this.minEnergyConstraints = m4;
            } else m4.clear();
            for ( ; 0 < size4; size4 = in.mapNext()) {
              for ( ; size4 != 0; size4--) {
                java.lang.CharSequence k4 = null;
                k4 = in.readString(k4 instanceof Utf8 ? (Utf8)k4 : null);
                java.lang.Double v4 = null;
                v4 = in.readDouble();
                m4.put(k4, v4);
              }
            }
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.maxEnergyConstraints = null;
          } else {
            long size5 = in.readMapStart();
            java.util.Map<java.lang.CharSequence,java.lang.Double> m5 = this.maxEnergyConstraints; // Need fresh name due to limitation of macro system
            if (m5 == null) {
              m5 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size5);
              this.maxEnergyConstraints = m5;
            } else m5.clear();
            for ( ; 0 < size5; size5 = in.mapNext()) {
              for ( ; size5 != 0; size5--) {
                java.lang.CharSequence k5 = null;
                k5 = in.readString(k5 instanceof Utf8 ? (Utf8)k5 : null);
                java.lang.Double v5 = null;
                v5 = in.readDouble();
                m5.put(k5, v5);
              }
            }
          }
          break;

        case 12:
          long size6 = in.readArrayStart();
          java.util.List<java.lang.Integer> a6 = this.forbiddenChargeIntervals;
          if (a6 == null) {
            a6 = new SpecificData.Array<java.lang.Integer>((int)size6, SCHEMA$.getField("forbiddenChargeIntervals").schema());
            this.forbiddenChargeIntervals = a6;
          } else a6.clear();
          SpecificData.Array<java.lang.Integer> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a6 : null);
          for ( ; 0 < size6; size6 = in.arrayNext()) {
            for ( ; size6 != 0; size6--) {
              java.lang.Integer e6 = (ga6 != null ? ga6.peek() : null);
              e6 = in.readInt();
              a6.add(e6);
            }
          }
          break;

        case 13:
          long size7 = in.readArrayStart();
          java.util.List<java.lang.Integer> a7 = this.forbiddenDischargeIntervals;
          if (a7 == null) {
            a7 = new SpecificData.Array<java.lang.Integer>((int)size7, SCHEMA$.getField("forbiddenDischargeIntervals").schema());
            this.forbiddenDischargeIntervals = a7;
          } else a7.clear();
          SpecificData.Array<java.lang.Integer> ga7 = (a7 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a7 : null);
          for ( ; 0 < size7; size7 = in.arrayNext()) {
            for ( ; size7 != 0; size7--) {
              java.lang.Integer e7 = (ga7 != null ? ga7.peek() : null);
              e7 = in.readInt();
              a7.add(e7);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










