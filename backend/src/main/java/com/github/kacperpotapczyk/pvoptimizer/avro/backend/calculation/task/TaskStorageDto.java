/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Storage object */
@org.apache.avro.specific.AvroGenerated
public class TaskStorageDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3997104171704187599L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TaskStorageDto\",\"namespace\":\"com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task\",\"doc\":\"Storage object\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Storage id\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Storage name\"},{\"name\":\"revisionNumber\",\"type\":\"long\",\"doc\":\"Storage revision number\"},{\"name\":\"capacity\",\"type\":\"double\",\"doc\":\"Capacity of storage\"},{\"name\":\"maxCharge\",\"type\":\"double\",\"doc\":\"Maximal charging power\"},{\"name\":\"maxDischarge\",\"type\":\"double\",\"doc\":\"Maximal discharging power\"},{\"name\":\"initialEnergy\",\"type\":\"double\",\"doc\":\"Initial amount of stored energy at the beginning of optimization horizon\"},{\"name\":\"minChargeConstraints\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TaskStorageConstraintDto\",\"fields\":[{\"name\":\"constraintValue\",\"type\":\"double\",\"doc\":\"Constraint value\"},{\"name\":\"dateTimeStart\",\"type\":\"string\",\"doc\":\"Date and time of constraint start\"},{\"name\":\"dateTimeEnd\",\"type\":\"string\",\"doc\":\"Date and time of constraint end\"}]}},\"doc\":\"Minimal charging power constraints of storage\",\"default\":[]},{\"name\":\"maxChargeConstraints\",\"type\":{\"type\":\"array\",\"items\":\"TaskStorageConstraintDto\"},\"doc\":\"Maximal charging power constraints of storage\",\"default\":[]},{\"name\":\"minDischargeConstraints\",\"type\":{\"type\":\"array\",\"items\":\"TaskStorageConstraintDto\"},\"doc\":\"Minimal discharging power constraints of storage\",\"default\":[]},{\"name\":\"maxDischargeConstraints\",\"type\":{\"type\":\"array\",\"items\":\"TaskStorageConstraintDto\"},\"doc\":\"Maximal discharging power constraints of storage\",\"default\":[]},{\"name\":\"minEnergyConstraints\",\"type\":{\"type\":\"array\",\"items\":\"TaskStorageConstraintDto\"},\"doc\":\"Minimal energy constraints of storage\",\"default\":[]},{\"name\":\"maxEnergyConstraints\",\"type\":{\"type\":\"array\",\"items\":\"TaskStorageConstraintDto\"},\"doc\":\"Maximal energy constraints of storage\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TaskStorageDto> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TaskStorageDto> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TaskStorageDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TaskStorageDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TaskStorageDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TaskStorageDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TaskStorageDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TaskStorageDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TaskStorageDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Storage id */
  private long id;
  /** Storage name */
  private java.lang.CharSequence name;
  /** Storage revision number */
  private long revisionNumber;
  /** Capacity of storage */
  private double capacity;
  /** Maximal charging power */
  private double maxCharge;
  /** Maximal discharging power */
  private double maxDischarge;
  /** Initial amount of stored energy at the beginning of optimization horizon */
  private double initialEnergy;
  /** Minimal charging power constraints of storage */
  private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> minChargeConstraints;
  /** Maximal charging power constraints of storage */
  private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> maxChargeConstraints;
  /** Minimal discharging power constraints of storage */
  private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> minDischargeConstraints;
  /** Maximal discharging power constraints of storage */
  private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> maxDischargeConstraints;
  /** Minimal energy constraints of storage */
  private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> minEnergyConstraints;
  /** Maximal energy constraints of storage */
  private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> maxEnergyConstraints;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TaskStorageDto() {}

  /**
   * All-args constructor.
   * @param id Storage id
   * @param name Storage name
   * @param revisionNumber Storage revision number
   * @param capacity Capacity of storage
   * @param maxCharge Maximal charging power
   * @param maxDischarge Maximal discharging power
   * @param initialEnergy Initial amount of stored energy at the beginning of optimization horizon
   * @param minChargeConstraints Minimal charging power constraints of storage
   * @param maxChargeConstraints Maximal charging power constraints of storage
   * @param minDischargeConstraints Minimal discharging power constraints of storage
   * @param maxDischargeConstraints Maximal discharging power constraints of storage
   * @param minEnergyConstraints Minimal energy constraints of storage
   * @param maxEnergyConstraints Maximal energy constraints of storage
   */
  public TaskStorageDto(java.lang.Long id, java.lang.CharSequence name, java.lang.Long revisionNumber, java.lang.Double capacity, java.lang.Double maxCharge, java.lang.Double maxDischarge, java.lang.Double initialEnergy, java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> minChargeConstraints, java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> maxChargeConstraints, java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> minDischargeConstraints, java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> maxDischargeConstraints, java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> minEnergyConstraints, java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> maxEnergyConstraints) {
    this.id = id;
    this.name = name;
    this.revisionNumber = revisionNumber;
    this.capacity = capacity;
    this.maxCharge = maxCharge;
    this.maxDischarge = maxDischarge;
    this.initialEnergy = initialEnergy;
    this.minChargeConstraints = minChargeConstraints;
    this.maxChargeConstraints = maxChargeConstraints;
    this.minDischargeConstraints = minDischargeConstraints;
    this.maxDischargeConstraints = maxDischargeConstraints;
    this.minEnergyConstraints = minEnergyConstraints;
    this.maxEnergyConstraints = maxEnergyConstraints;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return revisionNumber;
    case 3: return capacity;
    case 4: return maxCharge;
    case 5: return maxDischarge;
    case 6: return initialEnergy;
    case 7: return minChargeConstraints;
    case 8: return maxChargeConstraints;
    case 9: return minDischargeConstraints;
    case 10: return maxDischargeConstraints;
    case 11: return minEnergyConstraints;
    case 12: return maxEnergyConstraints;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: revisionNumber = (java.lang.Long)value$; break;
    case 3: capacity = (java.lang.Double)value$; break;
    case 4: maxCharge = (java.lang.Double)value$; break;
    case 5: maxDischarge = (java.lang.Double)value$; break;
    case 6: initialEnergy = (java.lang.Double)value$; break;
    case 7: minChargeConstraints = (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)value$; break;
    case 8: maxChargeConstraints = (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)value$; break;
    case 9: minDischargeConstraints = (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)value$; break;
    case 10: maxDischargeConstraints = (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)value$; break;
    case 11: minEnergyConstraints = (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)value$; break;
    case 12: maxEnergyConstraints = (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Storage id
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Storage id
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return Storage name
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * Storage name
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'revisionNumber' field.
   * @return Storage revision number
   */
  public long getRevisionNumber() {
    return revisionNumber;
  }


  /**
   * Sets the value of the 'revisionNumber' field.
   * Storage revision number
   * @param value the value to set.
   */
  public void setRevisionNumber(long value) {
    this.revisionNumber = value;
  }

  /**
   * Gets the value of the 'capacity' field.
   * @return Capacity of storage
   */
  public double getCapacity() {
    return capacity;
  }


  /**
   * Sets the value of the 'capacity' field.
   * Capacity of storage
   * @param value the value to set.
   */
  public void setCapacity(double value) {
    this.capacity = value;
  }

  /**
   * Gets the value of the 'maxCharge' field.
   * @return Maximal charging power
   */
  public double getMaxCharge() {
    return maxCharge;
  }


  /**
   * Sets the value of the 'maxCharge' field.
   * Maximal charging power
   * @param value the value to set.
   */
  public void setMaxCharge(double value) {
    this.maxCharge = value;
  }

  /**
   * Gets the value of the 'maxDischarge' field.
   * @return Maximal discharging power
   */
  public double getMaxDischarge() {
    return maxDischarge;
  }


  /**
   * Sets the value of the 'maxDischarge' field.
   * Maximal discharging power
   * @param value the value to set.
   */
  public void setMaxDischarge(double value) {
    this.maxDischarge = value;
  }

  /**
   * Gets the value of the 'initialEnergy' field.
   * @return Initial amount of stored energy at the beginning of optimization horizon
   */
  public double getInitialEnergy() {
    return initialEnergy;
  }


  /**
   * Sets the value of the 'initialEnergy' field.
   * Initial amount of stored energy at the beginning of optimization horizon
   * @param value the value to set.
   */
  public void setInitialEnergy(double value) {
    this.initialEnergy = value;
  }

  /**
   * Gets the value of the 'minChargeConstraints' field.
   * @return Minimal charging power constraints of storage
   */
  public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> getMinChargeConstraints() {
    return minChargeConstraints;
  }


  /**
   * Sets the value of the 'minChargeConstraints' field.
   * Minimal charging power constraints of storage
   * @param value the value to set.
   */
  public void setMinChargeConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> value) {
    this.minChargeConstraints = value;
  }

  /**
   * Gets the value of the 'maxChargeConstraints' field.
   * @return Maximal charging power constraints of storage
   */
  public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> getMaxChargeConstraints() {
    return maxChargeConstraints;
  }


  /**
   * Sets the value of the 'maxChargeConstraints' field.
   * Maximal charging power constraints of storage
   * @param value the value to set.
   */
  public void setMaxChargeConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> value) {
    this.maxChargeConstraints = value;
  }

  /**
   * Gets the value of the 'minDischargeConstraints' field.
   * @return Minimal discharging power constraints of storage
   */
  public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> getMinDischargeConstraints() {
    return minDischargeConstraints;
  }


  /**
   * Sets the value of the 'minDischargeConstraints' field.
   * Minimal discharging power constraints of storage
   * @param value the value to set.
   */
  public void setMinDischargeConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> value) {
    this.minDischargeConstraints = value;
  }

  /**
   * Gets the value of the 'maxDischargeConstraints' field.
   * @return Maximal discharging power constraints of storage
   */
  public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> getMaxDischargeConstraints() {
    return maxDischargeConstraints;
  }


  /**
   * Sets the value of the 'maxDischargeConstraints' field.
   * Maximal discharging power constraints of storage
   * @param value the value to set.
   */
  public void setMaxDischargeConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> value) {
    this.maxDischargeConstraints = value;
  }

  /**
   * Gets the value of the 'minEnergyConstraints' field.
   * @return Minimal energy constraints of storage
   */
  public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> getMinEnergyConstraints() {
    return minEnergyConstraints;
  }


  /**
   * Sets the value of the 'minEnergyConstraints' field.
   * Minimal energy constraints of storage
   * @param value the value to set.
   */
  public void setMinEnergyConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> value) {
    this.minEnergyConstraints = value;
  }

  /**
   * Gets the value of the 'maxEnergyConstraints' field.
   * @return Maximal energy constraints of storage
   */
  public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> getMaxEnergyConstraints() {
    return maxEnergyConstraints;
  }


  /**
   * Sets the value of the 'maxEnergyConstraints' field.
   * Maximal energy constraints of storage
   * @param value the value to set.
   */
  public void setMaxEnergyConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> value) {
    this.maxEnergyConstraints = value;
  }

  /**
   * Creates a new TaskStorageDto RecordBuilder.
   * @return A new TaskStorageDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder newBuilder() {
    return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder();
  }

  /**
   * Creates a new TaskStorageDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TaskStorageDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder(other);
    }
  }

  /**
   * Creates a new TaskStorageDto RecordBuilder by copying an existing TaskStorageDto instance.
   * @param other The existing instance to copy.
   * @return A new TaskStorageDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for TaskStorageDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TaskStorageDto>
    implements org.apache.avro.data.RecordBuilder<TaskStorageDto> {

    /** Storage id */
    private long id;
    /** Storage name */
    private java.lang.CharSequence name;
    /** Storage revision number */
    private long revisionNumber;
    /** Capacity of storage */
    private double capacity;
    /** Maximal charging power */
    private double maxCharge;
    /** Maximal discharging power */
    private double maxDischarge;
    /** Initial amount of stored energy at the beginning of optimization horizon */
    private double initialEnergy;
    /** Minimal charging power constraints of storage */
    private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> minChargeConstraints;
    /** Maximal charging power constraints of storage */
    private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> maxChargeConstraints;
    /** Minimal discharging power constraints of storage */
    private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> minDischargeConstraints;
    /** Maximal discharging power constraints of storage */
    private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> maxDischargeConstraints;
    /** Minimal energy constraints of storage */
    private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> minEnergyConstraints;
    /** Maximal energy constraints of storage */
    private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> maxEnergyConstraints;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.revisionNumber)) {
        this.revisionNumber = data().deepCopy(fields()[2].schema(), other.revisionNumber);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.capacity)) {
        this.capacity = data().deepCopy(fields()[3].schema(), other.capacity);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.maxCharge)) {
        this.maxCharge = data().deepCopy(fields()[4].schema(), other.maxCharge);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.maxDischarge)) {
        this.maxDischarge = data().deepCopy(fields()[5].schema(), other.maxDischarge);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.initialEnergy)) {
        this.initialEnergy = data().deepCopy(fields()[6].schema(), other.initialEnergy);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.minChargeConstraints)) {
        this.minChargeConstraints = data().deepCopy(fields()[7].schema(), other.minChargeConstraints);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.maxChargeConstraints)) {
        this.maxChargeConstraints = data().deepCopy(fields()[8].schema(), other.maxChargeConstraints);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.minDischargeConstraints)) {
        this.minDischargeConstraints = data().deepCopy(fields()[9].schema(), other.minDischargeConstraints);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.maxDischargeConstraints)) {
        this.maxDischargeConstraints = data().deepCopy(fields()[10].schema(), other.maxDischargeConstraints);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.minEnergyConstraints)) {
        this.minEnergyConstraints = data().deepCopy(fields()[11].schema(), other.minEnergyConstraints);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.maxEnergyConstraints)) {
        this.maxEnergyConstraints = data().deepCopy(fields()[12].schema(), other.maxEnergyConstraints);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing TaskStorageDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.revisionNumber)) {
        this.revisionNumber = data().deepCopy(fields()[2].schema(), other.revisionNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.capacity)) {
        this.capacity = data().deepCopy(fields()[3].schema(), other.capacity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.maxCharge)) {
        this.maxCharge = data().deepCopy(fields()[4].schema(), other.maxCharge);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.maxDischarge)) {
        this.maxDischarge = data().deepCopy(fields()[5].schema(), other.maxDischarge);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.initialEnergy)) {
        this.initialEnergy = data().deepCopy(fields()[6].schema(), other.initialEnergy);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.minChargeConstraints)) {
        this.minChargeConstraints = data().deepCopy(fields()[7].schema(), other.minChargeConstraints);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.maxChargeConstraints)) {
        this.maxChargeConstraints = data().deepCopy(fields()[8].schema(), other.maxChargeConstraints);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.minDischargeConstraints)) {
        this.minDischargeConstraints = data().deepCopy(fields()[9].schema(), other.minDischargeConstraints);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.maxDischargeConstraints)) {
        this.maxDischargeConstraints = data().deepCopy(fields()[10].schema(), other.maxDischargeConstraints);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.minEnergyConstraints)) {
        this.minEnergyConstraints = data().deepCopy(fields()[11].schema(), other.minEnergyConstraints);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.maxEnergyConstraints)) {
        this.maxEnergyConstraints = data().deepCopy(fields()[12].schema(), other.maxEnergyConstraints);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Storage id
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Storage id
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Storage id
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Storage id
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * Storage name
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * Storage name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Storage name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * Storage name
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'revisionNumber' field.
      * Storage revision number
      * @return The value.
      */
    public long getRevisionNumber() {
      return revisionNumber;
    }


    /**
      * Sets the value of the 'revisionNumber' field.
      * Storage revision number
      * @param value The value of 'revisionNumber'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder setRevisionNumber(long value) {
      validate(fields()[2], value);
      this.revisionNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'revisionNumber' field has been set.
      * Storage revision number
      * @return True if the 'revisionNumber' field has been set, false otherwise.
      */
    public boolean hasRevisionNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'revisionNumber' field.
      * Storage revision number
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder clearRevisionNumber() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'capacity' field.
      * Capacity of storage
      * @return The value.
      */
    public double getCapacity() {
      return capacity;
    }


    /**
      * Sets the value of the 'capacity' field.
      * Capacity of storage
      * @param value The value of 'capacity'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder setCapacity(double value) {
      validate(fields()[3], value);
      this.capacity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'capacity' field has been set.
      * Capacity of storage
      * @return True if the 'capacity' field has been set, false otherwise.
      */
    public boolean hasCapacity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'capacity' field.
      * Capacity of storage
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder clearCapacity() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxCharge' field.
      * Maximal charging power
      * @return The value.
      */
    public double getMaxCharge() {
      return maxCharge;
    }


    /**
      * Sets the value of the 'maxCharge' field.
      * Maximal charging power
      * @param value The value of 'maxCharge'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder setMaxCharge(double value) {
      validate(fields()[4], value);
      this.maxCharge = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'maxCharge' field has been set.
      * Maximal charging power
      * @return True if the 'maxCharge' field has been set, false otherwise.
      */
    public boolean hasMaxCharge() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'maxCharge' field.
      * Maximal charging power
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder clearMaxCharge() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxDischarge' field.
      * Maximal discharging power
      * @return The value.
      */
    public double getMaxDischarge() {
      return maxDischarge;
    }


    /**
      * Sets the value of the 'maxDischarge' field.
      * Maximal discharging power
      * @param value The value of 'maxDischarge'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder setMaxDischarge(double value) {
      validate(fields()[5], value);
      this.maxDischarge = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'maxDischarge' field has been set.
      * Maximal discharging power
      * @return True if the 'maxDischarge' field has been set, false otherwise.
      */
    public boolean hasMaxDischarge() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'maxDischarge' field.
      * Maximal discharging power
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder clearMaxDischarge() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'initialEnergy' field.
      * Initial amount of stored energy at the beginning of optimization horizon
      * @return The value.
      */
    public double getInitialEnergy() {
      return initialEnergy;
    }


    /**
      * Sets the value of the 'initialEnergy' field.
      * Initial amount of stored energy at the beginning of optimization horizon
      * @param value The value of 'initialEnergy'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder setInitialEnergy(double value) {
      validate(fields()[6], value);
      this.initialEnergy = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'initialEnergy' field has been set.
      * Initial amount of stored energy at the beginning of optimization horizon
      * @return True if the 'initialEnergy' field has been set, false otherwise.
      */
    public boolean hasInitialEnergy() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'initialEnergy' field.
      * Initial amount of stored energy at the beginning of optimization horizon
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder clearInitialEnergy() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'minChargeConstraints' field.
      * Minimal charging power constraints of storage
      * @return The value.
      */
    public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> getMinChargeConstraints() {
      return minChargeConstraints;
    }


    /**
      * Sets the value of the 'minChargeConstraints' field.
      * Minimal charging power constraints of storage
      * @param value The value of 'minChargeConstraints'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder setMinChargeConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> value) {
      validate(fields()[7], value);
      this.minChargeConstraints = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'minChargeConstraints' field has been set.
      * Minimal charging power constraints of storage
      * @return True if the 'minChargeConstraints' field has been set, false otherwise.
      */
    public boolean hasMinChargeConstraints() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'minChargeConstraints' field.
      * Minimal charging power constraints of storage
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder clearMinChargeConstraints() {
      minChargeConstraints = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxChargeConstraints' field.
      * Maximal charging power constraints of storage
      * @return The value.
      */
    public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> getMaxChargeConstraints() {
      return maxChargeConstraints;
    }


    /**
      * Sets the value of the 'maxChargeConstraints' field.
      * Maximal charging power constraints of storage
      * @param value The value of 'maxChargeConstraints'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder setMaxChargeConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> value) {
      validate(fields()[8], value);
      this.maxChargeConstraints = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'maxChargeConstraints' field has been set.
      * Maximal charging power constraints of storage
      * @return True if the 'maxChargeConstraints' field has been set, false otherwise.
      */
    public boolean hasMaxChargeConstraints() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'maxChargeConstraints' field.
      * Maximal charging power constraints of storage
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder clearMaxChargeConstraints() {
      maxChargeConstraints = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'minDischargeConstraints' field.
      * Minimal discharging power constraints of storage
      * @return The value.
      */
    public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> getMinDischargeConstraints() {
      return minDischargeConstraints;
    }


    /**
      * Sets the value of the 'minDischargeConstraints' field.
      * Minimal discharging power constraints of storage
      * @param value The value of 'minDischargeConstraints'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder setMinDischargeConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> value) {
      validate(fields()[9], value);
      this.minDischargeConstraints = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'minDischargeConstraints' field has been set.
      * Minimal discharging power constraints of storage
      * @return True if the 'minDischargeConstraints' field has been set, false otherwise.
      */
    public boolean hasMinDischargeConstraints() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'minDischargeConstraints' field.
      * Minimal discharging power constraints of storage
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder clearMinDischargeConstraints() {
      minDischargeConstraints = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxDischargeConstraints' field.
      * Maximal discharging power constraints of storage
      * @return The value.
      */
    public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> getMaxDischargeConstraints() {
      return maxDischargeConstraints;
    }


    /**
      * Sets the value of the 'maxDischargeConstraints' field.
      * Maximal discharging power constraints of storage
      * @param value The value of 'maxDischargeConstraints'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder setMaxDischargeConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> value) {
      validate(fields()[10], value);
      this.maxDischargeConstraints = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'maxDischargeConstraints' field has been set.
      * Maximal discharging power constraints of storage
      * @return True if the 'maxDischargeConstraints' field has been set, false otherwise.
      */
    public boolean hasMaxDischargeConstraints() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'maxDischargeConstraints' field.
      * Maximal discharging power constraints of storage
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder clearMaxDischargeConstraints() {
      maxDischargeConstraints = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'minEnergyConstraints' field.
      * Minimal energy constraints of storage
      * @return The value.
      */
    public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> getMinEnergyConstraints() {
      return minEnergyConstraints;
    }


    /**
      * Sets the value of the 'minEnergyConstraints' field.
      * Minimal energy constraints of storage
      * @param value The value of 'minEnergyConstraints'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder setMinEnergyConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> value) {
      validate(fields()[11], value);
      this.minEnergyConstraints = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'minEnergyConstraints' field has been set.
      * Minimal energy constraints of storage
      * @return True if the 'minEnergyConstraints' field has been set, false otherwise.
      */
    public boolean hasMinEnergyConstraints() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'minEnergyConstraints' field.
      * Minimal energy constraints of storage
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder clearMinEnergyConstraints() {
      minEnergyConstraints = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxEnergyConstraints' field.
      * Maximal energy constraints of storage
      * @return The value.
      */
    public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> getMaxEnergyConstraints() {
      return maxEnergyConstraints;
    }


    /**
      * Sets the value of the 'maxEnergyConstraints' field.
      * Maximal energy constraints of storage
      * @param value The value of 'maxEnergyConstraints'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder setMaxEnergyConstraints(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> value) {
      validate(fields()[12], value);
      this.maxEnergyConstraints = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'maxEnergyConstraints' field has been set.
      * Maximal energy constraints of storage
      * @return True if the 'maxEnergyConstraints' field has been set, false otherwise.
      */
    public boolean hasMaxEnergyConstraints() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'maxEnergyConstraints' field.
      * Maximal energy constraints of storage
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageDto.Builder clearMaxEnergyConstraints() {
      maxEnergyConstraints = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TaskStorageDto build() {
      try {
        TaskStorageDto record = new TaskStorageDto();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.revisionNumber = fieldSetFlags()[2] ? this.revisionNumber : (java.lang.Long) defaultValue(fields()[2]);
        record.capacity = fieldSetFlags()[3] ? this.capacity : (java.lang.Double) defaultValue(fields()[3]);
        record.maxCharge = fieldSetFlags()[4] ? this.maxCharge : (java.lang.Double) defaultValue(fields()[4]);
        record.maxDischarge = fieldSetFlags()[5] ? this.maxDischarge : (java.lang.Double) defaultValue(fields()[5]);
        record.initialEnergy = fieldSetFlags()[6] ? this.initialEnergy : (java.lang.Double) defaultValue(fields()[6]);
        record.minChargeConstraints = fieldSetFlags()[7] ? this.minChargeConstraints : (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>) defaultValue(fields()[7]);
        record.maxChargeConstraints = fieldSetFlags()[8] ? this.maxChargeConstraints : (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>) defaultValue(fields()[8]);
        record.minDischargeConstraints = fieldSetFlags()[9] ? this.minDischargeConstraints : (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>) defaultValue(fields()[9]);
        record.maxDischargeConstraints = fieldSetFlags()[10] ? this.maxDischargeConstraints : (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>) defaultValue(fields()[10]);
        record.minEnergyConstraints = fieldSetFlags()[11] ? this.minEnergyConstraints : (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>) defaultValue(fields()[11]);
        record.maxEnergyConstraints = fieldSetFlags()[12] ? this.maxEnergyConstraints : (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TaskStorageDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<TaskStorageDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TaskStorageDto>
    READER$ = (org.apache.avro.io.DatumReader<TaskStorageDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeString(this.name);

    out.writeLong(this.revisionNumber);

    out.writeDouble(this.capacity);

    out.writeDouble(this.maxCharge);

    out.writeDouble(this.maxDischarge);

    out.writeDouble(this.initialEnergy);

    long size0 = this.minChargeConstraints.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e0: this.minChargeConstraints) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.maxChargeConstraints.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e1: this.maxChargeConstraints) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.minDischargeConstraints.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e2: this.minDischargeConstraints) {
      actualSize2++;
      out.startItem();
      e2.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

    long size3 = this.maxDischargeConstraints.size();
    out.writeArrayStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e3: this.maxDischargeConstraints) {
      actualSize3++;
      out.startItem();
      e3.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

    long size4 = this.minEnergyConstraints.size();
    out.writeArrayStart();
    out.setItemCount(size4);
    long actualSize4 = 0;
    for (com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e4: this.minEnergyConstraints) {
      actualSize4++;
      out.startItem();
      e4.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize4 != size4)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");

    long size5 = this.maxEnergyConstraints.size();
    out.writeArrayStart();
    out.setItemCount(size5);
    long actualSize5 = 0;
    for (com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e5: this.maxEnergyConstraints) {
      actualSize5++;
      out.startItem();
      e5.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize5 != size5)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size5 + ", but element count was " + actualSize5 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.revisionNumber = in.readLong();

      this.capacity = in.readDouble();

      this.maxCharge = in.readDouble();

      this.maxDischarge = in.readDouble();

      this.initialEnergy = in.readDouble();

      long size0 = in.readArrayStart();
      java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> a0 = this.minChargeConstraints;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>((int)size0, SCHEMA$.getField("minChargeConstraints").schema());
        this.minChargeConstraints = a0;
      } else a0.clear();
      SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> a1 = this.maxChargeConstraints;
      if (a1 == null) {
        a1 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>((int)size1, SCHEMA$.getField("maxChargeConstraints").schema());
        this.maxChargeConstraints = a1;
      } else a1.clear();
      SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> a2 = this.minDischargeConstraints;
      if (a2 == null) {
        a2 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>((int)size2, SCHEMA$.getField("minDischargeConstraints").schema());
        this.minDischargeConstraints = a2;
      } else a2.clear();
      SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e2 = (ga2 != null ? ga2.peek() : null);
          if (e2 == null) {
            e2 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto();
          }
          e2.customDecode(in);
          a2.add(e2);
        }
      }

      long size3 = in.readArrayStart();
      java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> a3 = this.maxDischargeConstraints;
      if (a3 == null) {
        a3 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>((int)size3, SCHEMA$.getField("maxDischargeConstraints").schema());
        this.maxDischargeConstraints = a3;
      } else a3.clear();
      SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)a3 : null);
      for ( ; 0 < size3; size3 = in.arrayNext()) {
        for ( ; size3 != 0; size3--) {
          com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e3 = (ga3 != null ? ga3.peek() : null);
          if (e3 == null) {
            e3 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto();
          }
          e3.customDecode(in);
          a3.add(e3);
        }
      }

      long size4 = in.readArrayStart();
      java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> a4 = this.minEnergyConstraints;
      if (a4 == null) {
        a4 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>((int)size4, SCHEMA$.getField("minEnergyConstraints").schema());
        this.minEnergyConstraints = a4;
      } else a4.clear();
      SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)a4 : null);
      for ( ; 0 < size4; size4 = in.arrayNext()) {
        for ( ; size4 != 0; size4--) {
          com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e4 = (ga4 != null ? ga4.peek() : null);
          if (e4 == null) {
            e4 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto();
          }
          e4.customDecode(in);
          a4.add(e4);
        }
      }

      long size5 = in.readArrayStart();
      java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> a5 = this.maxEnergyConstraints;
      if (a5 == null) {
        a5 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>((int)size5, SCHEMA$.getField("maxEnergyConstraints").schema());
        this.maxEnergyConstraints = a5;
      } else a5.clear();
      SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)a5 : null);
      for ( ; 0 < size5; size5 = in.arrayNext()) {
        for ( ; size5 != 0; size5--) {
          com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e5 = (ga5 != null ? ga5.peek() : null);
          if (e5 == null) {
            e5 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto();
          }
          e5.customDecode(in);
          a5.add(e5);
        }
      }

    } else {
      for (int i = 0; i < 13; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 2:
          this.revisionNumber = in.readLong();
          break;

        case 3:
          this.capacity = in.readDouble();
          break;

        case 4:
          this.maxCharge = in.readDouble();
          break;

        case 5:
          this.maxDischarge = in.readDouble();
          break;

        case 6:
          this.initialEnergy = in.readDouble();
          break;

        case 7:
          long size0 = in.readArrayStart();
          java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> a0 = this.minChargeConstraints;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>((int)size0, SCHEMA$.getField("minChargeConstraints").schema());
            this.minChargeConstraints = a0;
          } else a0.clear();
          SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 8:
          long size1 = in.readArrayStart();
          java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> a1 = this.maxChargeConstraints;
          if (a1 == null) {
            a1 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>((int)size1, SCHEMA$.getField("maxChargeConstraints").schema());
            this.maxChargeConstraints = a1;
          } else a1.clear();
          SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        case 9:
          long size2 = in.readArrayStart();
          java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> a2 = this.minDischargeConstraints;
          if (a2 == null) {
            a2 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>((int)size2, SCHEMA$.getField("minDischargeConstraints").schema());
            this.minDischargeConstraints = a2;
          } else a2.clear();
          SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e2 = (ga2 != null ? ga2.peek() : null);
              if (e2 == null) {
                e2 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto();
              }
              e2.customDecode(in);
              a2.add(e2);
            }
          }
          break;

        case 10:
          long size3 = in.readArrayStart();
          java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> a3 = this.maxDischargeConstraints;
          if (a3 == null) {
            a3 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>((int)size3, SCHEMA$.getField("maxDischargeConstraints").schema());
            this.maxDischargeConstraints = a3;
          } else a3.clear();
          SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)a3 : null);
          for ( ; 0 < size3; size3 = in.arrayNext()) {
            for ( ; size3 != 0; size3--) {
              com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e3 = (ga3 != null ? ga3.peek() : null);
              if (e3 == null) {
                e3 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto();
              }
              e3.customDecode(in);
              a3.add(e3);
            }
          }
          break;

        case 11:
          long size4 = in.readArrayStart();
          java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> a4 = this.minEnergyConstraints;
          if (a4 == null) {
            a4 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>((int)size4, SCHEMA$.getField("minEnergyConstraints").schema());
            this.minEnergyConstraints = a4;
          } else a4.clear();
          SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)a4 : null);
          for ( ; 0 < size4; size4 = in.arrayNext()) {
            for ( ; size4 != 0; size4--) {
              com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e4 = (ga4 != null ? ga4.peek() : null);
              if (e4 == null) {
                e4 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto();
              }
              e4.customDecode(in);
              a4.add(e4);
            }
          }
          break;

        case 12:
          long size5 = in.readArrayStart();
          java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> a5 = this.maxEnergyConstraints;
          if (a5 == null) {
            a5 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>((int)size5, SCHEMA$.getField("maxEnergyConstraints").schema());
            this.maxEnergyConstraints = a5;
          } else a5.clear();
          SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto>)a5 : null);
          for ( ; 0 < size5; size5 = in.arrayNext()) {
            for ( ; size5 != 0; size5--) {
              com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto e5 = (ga5 != null ? ga5.peek() : null);
              if (e5 == null) {
                e5 = new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.task.TaskStorageConstraintDto();
              }
              e5.customDecode(in);
              a5.add(e5);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










