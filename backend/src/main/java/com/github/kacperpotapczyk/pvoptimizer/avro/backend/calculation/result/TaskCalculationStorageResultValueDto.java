/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TaskCalculationStorageResultValueDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6557672056154713773L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TaskCalculationStorageResultValueDto\",\"namespace\":\"com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result\",\"fields\":[{\"name\":\"dateTimeStart\",\"type\":\"string\",\"doc\":\"Interval start date time\"},{\"name\":\"dateTimeEnd\",\"type\":\"string\",\"doc\":\"Interval end date time\"},{\"name\":\"charge\",\"type\":\"double\",\"doc\":\"Interval charging power\"},{\"name\":\"discharge\",\"type\":\"double\",\"doc\":\"Interval discharging power\"},{\"name\":\"energy\",\"type\":\"double\",\"doc\":\"Interval stored energy\"},{\"name\":\"storageMode\",\"type\":{\"type\":\"enum\",\"name\":\"TaskCalculationStorageModeDto\",\"symbols\":[\"DISABLED\",\"CHARGING\",\"DISCHARGING\"]},\"doc\":\"Interval storage mode\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TaskCalculationStorageResultValueDto> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TaskCalculationStorageResultValueDto> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TaskCalculationStorageResultValueDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TaskCalculationStorageResultValueDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TaskCalculationStorageResultValueDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TaskCalculationStorageResultValueDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TaskCalculationStorageResultValueDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TaskCalculationStorageResultValueDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TaskCalculationStorageResultValueDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Interval start date time */
  private java.lang.CharSequence dateTimeStart;
  /** Interval end date time */
  private java.lang.CharSequence dateTimeEnd;
  /** Interval charging power */
  private double charge;
  /** Interval discharging power */
  private double discharge;
  /** Interval stored energy */
  private double energy;
  /** Interval storage mode */
  private com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageModeDto storageMode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TaskCalculationStorageResultValueDto() {}

  /**
   * All-args constructor.
   * @param dateTimeStart Interval start date time
   * @param dateTimeEnd Interval end date time
   * @param charge Interval charging power
   * @param discharge Interval discharging power
   * @param energy Interval stored energy
   * @param storageMode Interval storage mode
   */
  public TaskCalculationStorageResultValueDto(java.lang.CharSequence dateTimeStart, java.lang.CharSequence dateTimeEnd, java.lang.Double charge, java.lang.Double discharge, java.lang.Double energy, com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageModeDto storageMode) {
    this.dateTimeStart = dateTimeStart;
    this.dateTimeEnd = dateTimeEnd;
    this.charge = charge;
    this.discharge = discharge;
    this.energy = energy;
    this.storageMode = storageMode;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dateTimeStart;
    case 1: return dateTimeEnd;
    case 2: return charge;
    case 3: return discharge;
    case 4: return energy;
    case 5: return storageMode;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dateTimeStart = (java.lang.CharSequence)value$; break;
    case 1: dateTimeEnd = (java.lang.CharSequence)value$; break;
    case 2: charge = (java.lang.Double)value$; break;
    case 3: discharge = (java.lang.Double)value$; break;
    case 4: energy = (java.lang.Double)value$; break;
    case 5: storageMode = (com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageModeDto)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'dateTimeStart' field.
   * @return Interval start date time
   */
  public java.lang.CharSequence getDateTimeStart() {
    return dateTimeStart;
  }


  /**
   * Sets the value of the 'dateTimeStart' field.
   * Interval start date time
   * @param value the value to set.
   */
  public void setDateTimeStart(java.lang.CharSequence value) {
    this.dateTimeStart = value;
  }

  /**
   * Gets the value of the 'dateTimeEnd' field.
   * @return Interval end date time
   */
  public java.lang.CharSequence getDateTimeEnd() {
    return dateTimeEnd;
  }


  /**
   * Sets the value of the 'dateTimeEnd' field.
   * Interval end date time
   * @param value the value to set.
   */
  public void setDateTimeEnd(java.lang.CharSequence value) {
    this.dateTimeEnd = value;
  }

  /**
   * Gets the value of the 'charge' field.
   * @return Interval charging power
   */
  public double getCharge() {
    return charge;
  }


  /**
   * Sets the value of the 'charge' field.
   * Interval charging power
   * @param value the value to set.
   */
  public void setCharge(double value) {
    this.charge = value;
  }

  /**
   * Gets the value of the 'discharge' field.
   * @return Interval discharging power
   */
  public double getDischarge() {
    return discharge;
  }


  /**
   * Sets the value of the 'discharge' field.
   * Interval discharging power
   * @param value the value to set.
   */
  public void setDischarge(double value) {
    this.discharge = value;
  }

  /**
   * Gets the value of the 'energy' field.
   * @return Interval stored energy
   */
  public double getEnergy() {
    return energy;
  }


  /**
   * Sets the value of the 'energy' field.
   * Interval stored energy
   * @param value the value to set.
   */
  public void setEnergy(double value) {
    this.energy = value;
  }

  /**
   * Gets the value of the 'storageMode' field.
   * @return Interval storage mode
   */
  public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageModeDto getStorageMode() {
    return storageMode;
  }


  /**
   * Sets the value of the 'storageMode' field.
   * Interval storage mode
   * @param value the value to set.
   */
  public void setStorageMode(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageModeDto value) {
    this.storageMode = value;
  }

  /**
   * Creates a new TaskCalculationStorageResultValueDto RecordBuilder.
   * @return A new TaskCalculationStorageResultValueDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder newBuilder() {
    return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder();
  }

  /**
   * Creates a new TaskCalculationStorageResultValueDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TaskCalculationStorageResultValueDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder(other);
    }
  }

  /**
   * Creates a new TaskCalculationStorageResultValueDto RecordBuilder by copying an existing TaskCalculationStorageResultValueDto instance.
   * @param other The existing instance to copy.
   * @return A new TaskCalculationStorageResultValueDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for TaskCalculationStorageResultValueDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TaskCalculationStorageResultValueDto>
    implements org.apache.avro.data.RecordBuilder<TaskCalculationStorageResultValueDto> {

    /** Interval start date time */
    private java.lang.CharSequence dateTimeStart;
    /** Interval end date time */
    private java.lang.CharSequence dateTimeEnd;
    /** Interval charging power */
    private double charge;
    /** Interval discharging power */
    private double discharge;
    /** Interval stored energy */
    private double energy;
    /** Interval storage mode */
    private com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageModeDto storageMode;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dateTimeStart)) {
        this.dateTimeStart = data().deepCopy(fields()[0].schema(), other.dateTimeStart);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.dateTimeEnd)) {
        this.dateTimeEnd = data().deepCopy(fields()[1].schema(), other.dateTimeEnd);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.charge)) {
        this.charge = data().deepCopy(fields()[2].schema(), other.charge);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.discharge)) {
        this.discharge = data().deepCopy(fields()[3].schema(), other.discharge);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.energy)) {
        this.energy = data().deepCopy(fields()[4].schema(), other.energy);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.storageMode)) {
        this.storageMode = data().deepCopy(fields()[5].schema(), other.storageMode);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing TaskCalculationStorageResultValueDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.dateTimeStart)) {
        this.dateTimeStart = data().deepCopy(fields()[0].schema(), other.dateTimeStart);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dateTimeEnd)) {
        this.dateTimeEnd = data().deepCopy(fields()[1].schema(), other.dateTimeEnd);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.charge)) {
        this.charge = data().deepCopy(fields()[2].schema(), other.charge);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.discharge)) {
        this.discharge = data().deepCopy(fields()[3].schema(), other.discharge);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.energy)) {
        this.energy = data().deepCopy(fields()[4].schema(), other.energy);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.storageMode)) {
        this.storageMode = data().deepCopy(fields()[5].schema(), other.storageMode);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'dateTimeStart' field.
      * Interval start date time
      * @return The value.
      */
    public java.lang.CharSequence getDateTimeStart() {
      return dateTimeStart;
    }


    /**
      * Sets the value of the 'dateTimeStart' field.
      * Interval start date time
      * @param value The value of 'dateTimeStart'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder setDateTimeStart(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.dateTimeStart = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'dateTimeStart' field has been set.
      * Interval start date time
      * @return True if the 'dateTimeStart' field has been set, false otherwise.
      */
    public boolean hasDateTimeStart() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'dateTimeStart' field.
      * Interval start date time
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder clearDateTimeStart() {
      dateTimeStart = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateTimeEnd' field.
      * Interval end date time
      * @return The value.
      */
    public java.lang.CharSequence getDateTimeEnd() {
      return dateTimeEnd;
    }


    /**
      * Sets the value of the 'dateTimeEnd' field.
      * Interval end date time
      * @param value The value of 'dateTimeEnd'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder setDateTimeEnd(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.dateTimeEnd = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dateTimeEnd' field has been set.
      * Interval end date time
      * @return True if the 'dateTimeEnd' field has been set, false otherwise.
      */
    public boolean hasDateTimeEnd() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dateTimeEnd' field.
      * Interval end date time
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder clearDateTimeEnd() {
      dateTimeEnd = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'charge' field.
      * Interval charging power
      * @return The value.
      */
    public double getCharge() {
      return charge;
    }


    /**
      * Sets the value of the 'charge' field.
      * Interval charging power
      * @param value The value of 'charge'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder setCharge(double value) {
      validate(fields()[2], value);
      this.charge = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'charge' field has been set.
      * Interval charging power
      * @return True if the 'charge' field has been set, false otherwise.
      */
    public boolean hasCharge() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'charge' field.
      * Interval charging power
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder clearCharge() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'discharge' field.
      * Interval discharging power
      * @return The value.
      */
    public double getDischarge() {
      return discharge;
    }


    /**
      * Sets the value of the 'discharge' field.
      * Interval discharging power
      * @param value The value of 'discharge'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder setDischarge(double value) {
      validate(fields()[3], value);
      this.discharge = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'discharge' field has been set.
      * Interval discharging power
      * @return True if the 'discharge' field has been set, false otherwise.
      */
    public boolean hasDischarge() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'discharge' field.
      * Interval discharging power
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder clearDischarge() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'energy' field.
      * Interval stored energy
      * @return The value.
      */
    public double getEnergy() {
      return energy;
    }


    /**
      * Sets the value of the 'energy' field.
      * Interval stored energy
      * @param value The value of 'energy'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder setEnergy(double value) {
      validate(fields()[4], value);
      this.energy = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'energy' field has been set.
      * Interval stored energy
      * @return True if the 'energy' field has been set, false otherwise.
      */
    public boolean hasEnergy() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'energy' field.
      * Interval stored energy
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder clearEnergy() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'storageMode' field.
      * Interval storage mode
      * @return The value.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageModeDto getStorageMode() {
      return storageMode;
    }


    /**
      * Sets the value of the 'storageMode' field.
      * Interval storage mode
      * @param value The value of 'storageMode'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder setStorageMode(com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageModeDto value) {
      validate(fields()[5], value);
      this.storageMode = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'storageMode' field has been set.
      * Interval storage mode
      * @return True if the 'storageMode' field has been set, false otherwise.
      */
    public boolean hasStorageMode() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'storageMode' field.
      * Interval storage mode
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageResultValueDto.Builder clearStorageMode() {
      storageMode = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TaskCalculationStorageResultValueDto build() {
      try {
        TaskCalculationStorageResultValueDto record = new TaskCalculationStorageResultValueDto();
        record.dateTimeStart = fieldSetFlags()[0] ? this.dateTimeStart : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.dateTimeEnd = fieldSetFlags()[1] ? this.dateTimeEnd : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.charge = fieldSetFlags()[2] ? this.charge : (java.lang.Double) defaultValue(fields()[2]);
        record.discharge = fieldSetFlags()[3] ? this.discharge : (java.lang.Double) defaultValue(fields()[3]);
        record.energy = fieldSetFlags()[4] ? this.energy : (java.lang.Double) defaultValue(fields()[4]);
        record.storageMode = fieldSetFlags()[5] ? this.storageMode : (com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageModeDto) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TaskCalculationStorageResultValueDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<TaskCalculationStorageResultValueDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TaskCalculationStorageResultValueDto>
    READER$ = (org.apache.avro.io.DatumReader<TaskCalculationStorageResultValueDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.dateTimeStart);

    out.writeString(this.dateTimeEnd);

    out.writeDouble(this.charge);

    out.writeDouble(this.discharge);

    out.writeDouble(this.energy);

    out.writeEnum(this.storageMode.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.dateTimeStart = in.readString(this.dateTimeStart instanceof Utf8 ? (Utf8)this.dateTimeStart : null);

      this.dateTimeEnd = in.readString(this.dateTimeEnd instanceof Utf8 ? (Utf8)this.dateTimeEnd : null);

      this.charge = in.readDouble();

      this.discharge = in.readDouble();

      this.energy = in.readDouble();

      this.storageMode = com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageModeDto.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.dateTimeStart = in.readString(this.dateTimeStart instanceof Utf8 ? (Utf8)this.dateTimeStart : null);
          break;

        case 1:
          this.dateTimeEnd = in.readString(this.dateTimeEnd instanceof Utf8 ? (Utf8)this.dateTimeEnd : null);
          break;

        case 2:
          this.charge = in.readDouble();
          break;

        case 3:
          this.discharge = in.readDouble();
          break;

        case 4:
          this.energy = in.readDouble();
          break;

        case 5:
          this.storageMode = com.github.kacperpotapczyk.pvoptimizer.avro.backend.calculation.result.TaskCalculationStorageModeDto.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










