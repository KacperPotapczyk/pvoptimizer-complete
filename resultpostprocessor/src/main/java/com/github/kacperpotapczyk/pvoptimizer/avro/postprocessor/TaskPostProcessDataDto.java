/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TaskPostProcessDataDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6199383605274936508L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TaskPostProcessDataDto\",\"namespace\":\"com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Task identifier\"},{\"name\":\"dateTimeStart\",\"type\":\"string\",\"doc\":\"Task start date and time\"},{\"name\":\"dateTimeEnd\",\"type\":\"string\",\"doc\":\"Task end date and time\"},{\"name\":\"intervals\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"IntervalDto\",\"fields\":[{\"name\":\"dateTimeStart\",\"type\":\"string\",\"doc\":\"Interval start date and time\"},{\"name\":\"dateTimeEnd\",\"type\":\"string\",\"doc\":\"Interval end date and time\"}]}},\"doc\":\"List of intervals\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TaskPostProcessDataDto> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TaskPostProcessDataDto> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TaskPostProcessDataDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TaskPostProcessDataDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TaskPostProcessDataDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TaskPostProcessDataDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TaskPostProcessDataDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TaskPostProcessDataDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TaskPostProcessDataDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Task identifier */
  private long id;
  /** Task start date and time */
  private java.lang.CharSequence dateTimeStart;
  /** Task end date and time */
  private java.lang.CharSequence dateTimeEnd;
  /** List of intervals */
  private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto> intervals;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TaskPostProcessDataDto() {}

  /**
   * All-args constructor.
   * @param id Task identifier
   * @param dateTimeStart Task start date and time
   * @param dateTimeEnd Task end date and time
   * @param intervals List of intervals
   */
  public TaskPostProcessDataDto(java.lang.Long id, java.lang.CharSequence dateTimeStart, java.lang.CharSequence dateTimeEnd, java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto> intervals) {
    this.id = id;
    this.dateTimeStart = dateTimeStart;
    this.dateTimeEnd = dateTimeEnd;
    this.intervals = intervals;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return dateTimeStart;
    case 2: return dateTimeEnd;
    case 3: return intervals;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: dateTimeStart = (java.lang.CharSequence)value$; break;
    case 2: dateTimeEnd = (java.lang.CharSequence)value$; break;
    case 3: intervals = (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Task identifier
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Task identifier
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'dateTimeStart' field.
   * @return Task start date and time
   */
  public java.lang.CharSequence getDateTimeStart() {
    return dateTimeStart;
  }


  /**
   * Sets the value of the 'dateTimeStart' field.
   * Task start date and time
   * @param value the value to set.
   */
  public void setDateTimeStart(java.lang.CharSequence value) {
    this.dateTimeStart = value;
  }

  /**
   * Gets the value of the 'dateTimeEnd' field.
   * @return Task end date and time
   */
  public java.lang.CharSequence getDateTimeEnd() {
    return dateTimeEnd;
  }


  /**
   * Sets the value of the 'dateTimeEnd' field.
   * Task end date and time
   * @param value the value to set.
   */
  public void setDateTimeEnd(java.lang.CharSequence value) {
    this.dateTimeEnd = value;
  }

  /**
   * Gets the value of the 'intervals' field.
   * @return List of intervals
   */
  public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto> getIntervals() {
    return intervals;
  }


  /**
   * Sets the value of the 'intervals' field.
   * List of intervals
   * @param value the value to set.
   */
  public void setIntervals(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto> value) {
    this.intervals = value;
  }

  /**
   * Creates a new TaskPostProcessDataDto RecordBuilder.
   * @return A new TaskPostProcessDataDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder newBuilder() {
    return new com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder();
  }

  /**
   * Creates a new TaskPostProcessDataDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TaskPostProcessDataDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder(other);
    }
  }

  /**
   * Creates a new TaskPostProcessDataDto RecordBuilder by copying an existing TaskPostProcessDataDto instance.
   * @param other The existing instance to copy.
   * @return A new TaskPostProcessDataDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for TaskPostProcessDataDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TaskPostProcessDataDto>
    implements org.apache.avro.data.RecordBuilder<TaskPostProcessDataDto> {

    /** Task identifier */
    private long id;
    /** Task start date and time */
    private java.lang.CharSequence dateTimeStart;
    /** Task end date and time */
    private java.lang.CharSequence dateTimeEnd;
    /** List of intervals */
    private java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto> intervals;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.dateTimeStart)) {
        this.dateTimeStart = data().deepCopy(fields()[1].schema(), other.dateTimeStart);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.dateTimeEnd)) {
        this.dateTimeEnd = data().deepCopy(fields()[2].schema(), other.dateTimeEnd);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.intervals)) {
        this.intervals = data().deepCopy(fields()[3].schema(), other.intervals);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing TaskPostProcessDataDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dateTimeStart)) {
        this.dateTimeStart = data().deepCopy(fields()[1].schema(), other.dateTimeStart);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dateTimeEnd)) {
        this.dateTimeEnd = data().deepCopy(fields()[2].schema(), other.dateTimeEnd);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.intervals)) {
        this.intervals = data().deepCopy(fields()[3].schema(), other.intervals);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Task identifier
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Task identifier
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Task identifier
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Task identifier
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateTimeStart' field.
      * Task start date and time
      * @return The value.
      */
    public java.lang.CharSequence getDateTimeStart() {
      return dateTimeStart;
    }


    /**
      * Sets the value of the 'dateTimeStart' field.
      * Task start date and time
      * @param value The value of 'dateTimeStart'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder setDateTimeStart(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.dateTimeStart = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dateTimeStart' field has been set.
      * Task start date and time
      * @return True if the 'dateTimeStart' field has been set, false otherwise.
      */
    public boolean hasDateTimeStart() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dateTimeStart' field.
      * Task start date and time
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder clearDateTimeStart() {
      dateTimeStart = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateTimeEnd' field.
      * Task end date and time
      * @return The value.
      */
    public java.lang.CharSequence getDateTimeEnd() {
      return dateTimeEnd;
    }


    /**
      * Sets the value of the 'dateTimeEnd' field.
      * Task end date and time
      * @param value The value of 'dateTimeEnd'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder setDateTimeEnd(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.dateTimeEnd = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dateTimeEnd' field has been set.
      * Task end date and time
      * @return True if the 'dateTimeEnd' field has been set, false otherwise.
      */
    public boolean hasDateTimeEnd() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'dateTimeEnd' field.
      * Task end date and time
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder clearDateTimeEnd() {
      dateTimeEnd = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'intervals' field.
      * List of intervals
      * @return The value.
      */
    public java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto> getIntervals() {
      return intervals;
    }


    /**
      * Sets the value of the 'intervals' field.
      * List of intervals
      * @param value The value of 'intervals'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder setIntervals(java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto> value) {
      validate(fields()[3], value);
      this.intervals = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'intervals' field has been set.
      * List of intervals
      * @return True if the 'intervals' field has been set, false otherwise.
      */
    public boolean hasIntervals() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'intervals' field.
      * List of intervals
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.TaskPostProcessDataDto.Builder clearIntervals() {
      intervals = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TaskPostProcessDataDto build() {
      try {
        TaskPostProcessDataDto record = new TaskPostProcessDataDto();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.dateTimeStart = fieldSetFlags()[1] ? this.dateTimeStart : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.dateTimeEnd = fieldSetFlags()[2] ? this.dateTimeEnd : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.intervals = fieldSetFlags()[3] ? this.intervals : (java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TaskPostProcessDataDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<TaskPostProcessDataDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TaskPostProcessDataDto>
    READER$ = (org.apache.avro.io.DatumReader<TaskPostProcessDataDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeString(this.dateTimeStart);

    out.writeString(this.dateTimeEnd);

    long size0 = this.intervals.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto e0: this.intervals) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.dateTimeStart = in.readString(this.dateTimeStart instanceof Utf8 ? (Utf8)this.dateTimeStart : null);

      this.dateTimeEnd = in.readString(this.dateTimeEnd instanceof Utf8 ? (Utf8)this.dateTimeEnd : null);

      long size0 = in.readArrayStart();
      java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto> a0 = this.intervals;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto>((int)size0, SCHEMA$.getField("intervals").schema());
        this.intervals = a0;
      } else a0.clear();
      SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.dateTimeStart = in.readString(this.dateTimeStart instanceof Utf8 ? (Utf8)this.dateTimeStart : null);
          break;

        case 2:
          this.dateTimeEnd = in.readString(this.dateTimeEnd instanceof Utf8 ? (Utf8)this.dateTimeEnd : null);
          break;

        case 3:
          long size0 = in.readArrayStart();
          java.util.List<com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto> a0 = this.intervals;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto>((int)size0, SCHEMA$.getField("intervals").schema());
            this.intervals = a0;
          } else a0.clear();
          SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.github.kacperpotapczyk.pvoptimizer.avro.postprocessor.IntervalDto();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










